
MIKRO_LAB_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0800512c  0800512c  0000612c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005304  08005304  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005304  08005304  00006304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800530c  0800530c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800530c  0800530c  0000630c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005310  08005310  00006310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005314  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  2000005c  08005370  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  08005370  00007704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3e8  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002119  00000000  00000000  00013474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00015590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d4  00000000  00000000  00015fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262fa  00000000  00000000  000167ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000daa9  00000000  00000000  0003caa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7f4f  00000000  00000000  0004a54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013249e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e2c  00000000  00000000  001324e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00135310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005114 	.word	0x08005114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005114 	.word	0x08005114

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	@ 0x28
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	4b4a      	ldr	r3, [pc, #296]	@ (80006d0 <MX_GPIO_Init+0x140>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a49      	ldr	r2, [pc, #292]	@ (80006d0 <MX_GPIO_Init+0x140>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b47      	ldr	r3, [pc, #284]	@ (80006d0 <MX_GPIO_Init+0x140>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	4b44      	ldr	r3, [pc, #272]	@ (80006d0 <MX_GPIO_Init+0x140>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a43      	ldr	r2, [pc, #268]	@ (80006d0 <MX_GPIO_Init+0x140>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b41      	ldr	r3, [pc, #260]	@ (80006d0 <MX_GPIO_Init+0x140>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b3e      	ldr	r3, [pc, #248]	@ (80006d0 <MX_GPIO_Init+0x140>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	4a3d      	ldr	r2, [pc, #244]	@ (80006d0 <MX_GPIO_Init+0x140>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e2:	4b3b      	ldr	r3, [pc, #236]	@ (80006d0 <MX_GPIO_Init+0x140>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	4b38      	ldr	r3, [pc, #224]	@ (80006d0 <MX_GPIO_Init+0x140>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	4a37      	ldr	r2, [pc, #220]	@ (80006d0 <MX_GPIO_Init+0x140>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fa:	4b35      	ldr	r3, [pc, #212]	@ (80006d0 <MX_GPIO_Init+0x140>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000606:	4b32      	ldr	r3, [pc, #200]	@ (80006d0 <MX_GPIO_Init+0x140>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	4a31      	ldr	r2, [pc, #196]	@ (80006d0 <MX_GPIO_Init+0x140>)
 800060c:	f043 0308 	orr.w	r3, r3, #8
 8000610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000612:	4b2f      	ldr	r3, [pc, #188]	@ (80006d0 <MX_GPIO_Init+0x140>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	f003 0308 	and.w	r3, r3, #8
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2120      	movs	r1, #32
 8000622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000626:	f001 f88b 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800062a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800062e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000630:	2303      	movs	r3, #3
 8000632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4619      	mov	r1, r3
 800063e:	4825      	ldr	r0, [pc, #148]	@ (80006d4 <MX_GPIO_Init+0x144>)
 8000640:	f000 fed4 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000644:	2303      	movs	r3, #3
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000648:	2303      	movs	r3, #3
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4820      	ldr	r0, [pc, #128]	@ (80006d8 <MX_GPIO_Init+0x148>)
 8000658:	f000 fec8 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 800065c:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 8000660:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000674:	f000 feba 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000678:	2320      	movs	r3, #32
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4619      	mov	r1, r3
 800068e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000692:	f000 feab 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000696:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800069a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069c:	2303      	movs	r3, #3
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	480c      	ldr	r0, [pc, #48]	@ (80006dc <MX_GPIO_Init+0x14c>)
 80006ac:	f000 fe9e 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006b0:	2304      	movs	r3, #4
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b4:	2303      	movs	r3, #3
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	4807      	ldr	r0, [pc, #28]	@ (80006e0 <MX_GPIO_Init+0x150>)
 80006c4:	f000 fe92 	bl	80013ec <HAL_GPIO_Init>

}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	@ 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000
 80006d4:	48000800 	.word	0x48000800
 80006d8:	48001c00 	.word	0x48001c00
 80006dc:	48000400 	.word	0x48000400
 80006e0:	48000c00 	.word	0x48000c00

080006e4 <FrameRd>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void FrameRd()
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

	// cmd[] <-- łapać "LED", "INSERT"
	// cmdARG[] <-- łapie argumenty "ON", "OFF", "BLINK"
	// NumArr[] <-- łapie cyfry "LED[BLINK,5]"

	int16_t sign = USART_getchar(); // [
 80006ea:	f000 fa9f 	bl	8000c2c <USART_getchar>
 80006ee:	4603      	mov	r3, r0
 80006f0:	80fb      	strh	r3, [r7, #6]
	if (sign < 0) return;
 80006f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	f2c0 80e5 	blt.w	80008c6 <FrameRd+0x1e2>

	switch (detection){
 80006fc:	4b74      	ldr	r3, [pc, #464]	@ (80008d0 <FrameRd+0x1ec>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b04      	cmp	r3, #4
 8000702:	f200 80e1 	bhi.w	80008c8 <FrameRd+0x1e4>
 8000706:	a201      	add	r2, pc, #4	@ (adr r2, 800070c <FrameRd+0x28>)
 8000708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070c:	08000721 	.word	0x08000721
 8000710:	08000737 	.word	0x08000737
 8000714:	08000769 	.word	0x08000769
 8000718:	080007ab 	.word	0x080007ab
 800071c:	080007eb 	.word	0x080007eb
	case Waiting:
		if (sign == 'L' || sign =='I') detection = Command;
 8000720:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000724:	2b4c      	cmp	r3, #76	@ 0x4c
 8000726:	d003      	beq.n	8000730 <FrameRd+0x4c>
 8000728:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800072c:	2b49      	cmp	r3, #73	@ 0x49
 800072e:	d102      	bne.n	8000736 <FrameRd+0x52>
 8000730:	4b67      	ldr	r3, [pc, #412]	@ (80008d0 <FrameRd+0x1ec>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
		//INSERT[Delay,5]
		// LED[ON]
	case Command:
		if (sign == '['){
 8000736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800073a:	2b5b      	cmp	r3, #91	@ 0x5b
 800073c:	d106      	bne.n	800074c <FrameRd+0x68>
			tempINDX = 0;
 800073e:	4b65      	ldr	r3, [pc, #404]	@ (80008d4 <FrameRd+0x1f0>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
			detection = Argument;
 8000744:	4b62      	ldr	r3, [pc, #392]	@ (80008d0 <FrameRd+0x1ec>)
 8000746:	2202      	movs	r2, #2
 8000748:	701a      	strb	r2, [r3, #0]
		}
		else{
			cmd[tempINDX] = sign; //LED
			tempINDX++;
		}
		break;
 800074a:	e0bd      	b.n	80008c8 <FrameRd+0x1e4>
			cmd[tempINDX] = sign; //LED
 800074c:	4b61      	ldr	r3, [pc, #388]	@ (80008d4 <FrameRd+0x1f0>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	b2d9      	uxtb	r1, r3
 8000756:	4b60      	ldr	r3, [pc, #384]	@ (80008d8 <FrameRd+0x1f4>)
 8000758:	5499      	strb	r1, [r3, r2]
			tempINDX++;
 800075a:	4b5e      	ldr	r3, [pc, #376]	@ (80008d4 <FrameRd+0x1f0>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b5c      	ldr	r3, [pc, #368]	@ (80008d4 <FrameRd+0x1f0>)
 8000764:	701a      	strb	r2, [r3, #0]
		break;
 8000766:	e0af      	b.n	80008c8 <FrameRd+0x1e4>
	case Argument:
		if (sign == ']'){  /// LED[BLINK,5]
 8000768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800076c:	2b5d      	cmp	r3, #93	@ 0x5d
 800076e:	d103      	bne.n	8000778 <FrameRd+0x94>
			detection = End;
 8000770:	4b57      	ldr	r3, [pc, #348]	@ (80008d0 <FrameRd+0x1ec>)
 8000772:	2204      	movs	r2, #4
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	e018      	b.n	80007aa <FrameRd+0xc6>
		}
		else if (sign == ',') {
 8000778:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800077c:	2b2c      	cmp	r3, #44	@ 0x2c
 800077e:	d106      	bne.n	800078e <FrameRd+0xaa>
			tempINDX = 0;
 8000780:	4b54      	ldr	r3, [pc, #336]	@ (80008d4 <FrameRd+0x1f0>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
			detection = number;
 8000786:	4b52      	ldr	r3, [pc, #328]	@ (80008d0 <FrameRd+0x1ec>)
 8000788:	2203      	movs	r2, #3
 800078a:	701a      	strb	r2, [r3, #0]
			break;
 800078c:	e09c      	b.n	80008c8 <FrameRd+0x1e4>
		}
		else{
			CMDarg[tempINDX] = sign; // ON, OFF, BLINK,5
 800078e:	4b51      	ldr	r3, [pc, #324]	@ (80008d4 <FrameRd+0x1f0>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	b2d9      	uxtb	r1, r3
 8000798:	4b50      	ldr	r3, [pc, #320]	@ (80008dc <FrameRd+0x1f8>)
 800079a:	5499      	strb	r1, [r3, r2]
			tempINDX++;
 800079c:	4b4d      	ldr	r3, [pc, #308]	@ (80008d4 <FrameRd+0x1f0>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b4b      	ldr	r3, [pc, #300]	@ (80008d4 <FrameRd+0x1f0>)
 80007a6:	701a      	strb	r2, [r3, #0]
			break;
 80007a8:	e08e      	b.n	80008c8 <FrameRd+0x1e4>
		}
	case number:
		if (sign == ']'){
 80007aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ae:	2b5d      	cmp	r3, #93	@ 0x5d
 80007b0:	d10d      	bne.n	80007ce <FrameRd+0xea>
			nr = atoi(NumArr);
 80007b2:	484b      	ldr	r0, [pc, #300]	@ (80008e0 <FrameRd+0x1fc>)
 80007b4:	f003 ff86 	bl	80046c4 <atoi>
 80007b8:	ee07 0a90 	vmov	s15, r0
 80007bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007c0:	4b48      	ldr	r3, [pc, #288]	@ (80008e4 <FrameRd+0x200>)
 80007c2:	edc3 7a00 	vstr	s15, [r3]
			detection = End;
 80007c6:	4b42      	ldr	r3, [pc, #264]	@ (80008d0 <FrameRd+0x1ec>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	701a      	strb	r2, [r3, #0]
		}
		else{
			NumArr[tempINDX] = sign; //5
			tempINDX++;
		}
		break;
 80007cc:	e07c      	b.n	80008c8 <FrameRd+0x1e4>
			NumArr[tempINDX] = sign; //5
 80007ce:	4b41      	ldr	r3, [pc, #260]	@ (80008d4 <FrameRd+0x1f0>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	b2d9      	uxtb	r1, r3
 80007d8:	4b41      	ldr	r3, [pc, #260]	@ (80008e0 <FrameRd+0x1fc>)
 80007da:	5499      	strb	r1, [r3, r2]
			tempINDX++;
 80007dc:	4b3d      	ldr	r3, [pc, #244]	@ (80008d4 <FrameRd+0x1f0>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b3b      	ldr	r3, [pc, #236]	@ (80008d4 <FrameRd+0x1f0>)
 80007e6:	701a      	strb	r2, [r3, #0]
		break;
 80007e8:	e06e      	b.n	80008c8 <FrameRd+0x1e4>

		// cmd[] = LED
		// cmdARG[] = BLINK
		// NumaArr[] = 5

		if (strcmp(cmd, "LED") == 0){
 80007ea:	493f      	ldr	r1, [pc, #252]	@ (80008e8 <FrameRd+0x204>)
 80007ec:	483a      	ldr	r0, [pc, #232]	@ (80008d8 <FrameRd+0x1f4>)
 80007ee:	f7ff fcef 	bl	80001d0 <strcmp>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d12e      	bne.n	8000856 <FrameRd+0x172>
			if (strcmp(CMDarg, "ON") == 0) ld2State = 1;
 80007f8:	493c      	ldr	r1, [pc, #240]	@ (80008ec <FrameRd+0x208>)
 80007fa:	4838      	ldr	r0, [pc, #224]	@ (80008dc <FrameRd+0x1f8>)
 80007fc:	f7ff fce8 	bl	80001d0 <strcmp>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d103      	bne.n	800080e <FrameRd+0x12a>
 8000806:	4b3a      	ldr	r3, [pc, #232]	@ (80008f0 <FrameRd+0x20c>)
 8000808:	2201      	movs	r2, #1
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	e03e      	b.n	800088c <FrameRd+0x1a8>
			else if (strcmp(CMDarg, "OFF") == 0) ld2State = 2;
 800080e:	4939      	ldr	r1, [pc, #228]	@ (80008f4 <FrameRd+0x210>)
 8000810:	4832      	ldr	r0, [pc, #200]	@ (80008dc <FrameRd+0x1f8>)
 8000812:	f7ff fcdd 	bl	80001d0 <strcmp>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d103      	bne.n	8000824 <FrameRd+0x140>
 800081c:	4b34      	ldr	r3, [pc, #208]	@ (80008f0 <FrameRd+0x20c>)
 800081e:	2202      	movs	r2, #2
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	e033      	b.n	800088c <FrameRd+0x1a8>
			else if (strcmp(CMDarg, "BLINK") == 0) {slow = 1000 / nr; ld2State = 3;}
 8000824:	4934      	ldr	r1, [pc, #208]	@ (80008f8 <FrameRd+0x214>)
 8000826:	482d      	ldr	r0, [pc, #180]	@ (80008dc <FrameRd+0x1f8>)
 8000828:	f7ff fcd2 	bl	80001d0 <strcmp>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d12c      	bne.n	800088c <FrameRd+0x1a8>
 8000832:	4b2c      	ldr	r3, [pc, #176]	@ (80008e4 <FrameRd+0x200>)
 8000834:	ed93 7a00 	vldr	s14, [r3]
 8000838:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80008fc <FrameRd+0x218>
 800083c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000844:	ee17 3a90 	vmov	r3, s15
 8000848:	b29a      	uxth	r2, r3
 800084a:	4b2d      	ldr	r3, [pc, #180]	@ (8000900 <FrameRd+0x21c>)
 800084c:	801a      	strh	r2, [r3, #0]
 800084e:	4b28      	ldr	r3, [pc, #160]	@ (80008f0 <FrameRd+0x20c>)
 8000850:	2203      	movs	r2, #3
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	e01a      	b.n	800088c <FrameRd+0x1a8>
		}else if (strcmp(cmd, "INSERT") == 0) {
 8000856:	492b      	ldr	r1, [pc, #172]	@ (8000904 <FrameRd+0x220>)
 8000858:	481f      	ldr	r0, [pc, #124]	@ (80008d8 <FrameRd+0x1f4>)
 800085a:	f7ff fcb9 	bl	80001d0 <strcmp>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d113      	bne.n	800088c <FrameRd+0x1a8>
			if (strcmp(CMDarg, "Delay") == 0) {ld2State = 4; slow = nr;}
 8000864:	4928      	ldr	r1, [pc, #160]	@ (8000908 <FrameRd+0x224>)
 8000866:	481d      	ldr	r0, [pc, #116]	@ (80008dc <FrameRd+0x1f8>)
 8000868:	f7ff fcb2 	bl	80001d0 <strcmp>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d10c      	bne.n	800088c <FrameRd+0x1a8>
 8000872:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <FrameRd+0x20c>)
 8000874:	2204      	movs	r2, #4
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <FrameRd+0x200>)
 800087a:	edd3 7a00 	vldr	s15, [r3]
 800087e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000882:	ee17 3a90 	vmov	r3, s15
 8000886:	b29a      	uxth	r2, r3
 8000888:	4b1d      	ldr	r3, [pc, #116]	@ (8000900 <FrameRd+0x21c>)
 800088a:	801a      	strh	r2, [r3, #0]
		}
		//USART_fsend("\r\r\n\n\r");
		USART_fsend("\r\r\n\n");
 800088c:	481f      	ldr	r0, [pc, #124]	@ (800090c <FrameRd+0x228>)
 800088e:	f000 f9f7 	bl	8000c80 <USART_fsend>
		tempINDX = 0;
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <FrameRd+0x1f0>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
		nr = 0;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <FrameRd+0x200>)
 800089a:	f04f 0200 	mov.w	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
		memset(cmd, '\0', sizeof(cmd));
 80008a0:	2280      	movs	r2, #128	@ 0x80
 80008a2:	2100      	movs	r1, #0
 80008a4:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <FrameRd+0x1f4>)
 80008a6:	f003 ffb5 	bl	8004814 <memset>
		memset(CMDarg, '\0', sizeof(CMDarg));
 80008aa:	2280      	movs	r2, #128	@ 0x80
 80008ac:	2100      	movs	r1, #0
 80008ae:	480b      	ldr	r0, [pc, #44]	@ (80008dc <FrameRd+0x1f8>)
 80008b0:	f003 ffb0 	bl	8004814 <memset>
		memset(NumArr, '\0', sizeof(NumArr));
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	2100      	movs	r1, #0
 80008b8:	4809      	ldr	r0, [pc, #36]	@ (80008e0 <FrameRd+0x1fc>)
 80008ba:	f003 ffab 	bl	8004814 <memset>
		detection = Waiting;
 80008be:	4b04      	ldr	r3, [pc, #16]	@ (80008d0 <FrameRd+0x1ec>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
		break;
 80008c4:	e000      	b.n	80008c8 <FrameRd+0x1e4>
	if (sign < 0) return;
 80008c6:	bf00      	nop
	}
}
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000204 	.word	0x20000204
 80008d4:	2000007e 	.word	0x2000007e
 80008d8:	20000100 	.word	0x20000100
 80008dc:	20000180 	.word	0x20000180
 80008e0:	20000080 	.word	0x20000080
 80008e4:	20000200 	.word	0x20000200
 80008e8:	0800512c 	.word	0x0800512c
 80008ec:	08005130 	.word	0x08005130
 80008f0:	20000078 	.word	0x20000078
 80008f4:	08005134 	.word	0x08005134
 80008f8:	08005138 	.word	0x08005138
 80008fc:	447a0000 	.word	0x447a0000
 8000900:	2000007c 	.word	0x2000007c
 8000904:	08005140 	.word	0x08005140
 8000908:	08005148 	.word	0x08005148
 800090c:	08005150 	.word	0x08005150

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000914:	f000 fb65 	bl	8000fe2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000918:	f000 f818 	bl	800094c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091c:	f7ff fe38 	bl	8000590 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000920:	f000 fa8a 	bl	8000e38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  USART_fsend("START %03d\r\n",72);
 8000924:	2148      	movs	r1, #72	@ 0x48
 8000926:	4806      	ldr	r0, [pc, #24]	@ (8000940 <main+0x30>)
 8000928:	f000 f9aa 	bl	8000c80 <USART_fsend>
  USART_fsend("START1 0x%04X\r\n",72);
 800092c:	2148      	movs	r1, #72	@ 0x48
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <main+0x34>)
 8000930:	f000 f9a6 	bl	8000c80 <USART_fsend>
  USART_fsend("START2 %03d\r\n",72);
 8000934:	2148      	movs	r1, #72	@ 0x48
 8000936:	4804      	ldr	r0, [pc, #16]	@ (8000948 <main+0x38>)
 8000938:	f000 f9a2 	bl	8000c80 <USART_fsend>

  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <main+0x2c>
 8000940:	08005158 	.word	0x08005158
 8000944:	08005168 	.word	0x08005168
 8000948:	08005178 	.word	0x08005178

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b096      	sub	sp, #88	@ 0x58
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2244      	movs	r2, #68	@ 0x44
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f003 ff5a 	bl	8004814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800096e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000972:	f000 ff25 	bl	80017c0 <HAL_PWREx_ControlVoltageScaling>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800097c:	f000 f838 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000980:	2310      	movs	r3, #16
 8000982:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000984:	2301      	movs	r3, #1
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800098c:	2360      	movs	r3, #96	@ 0x60
 800098e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000990:	2302      	movs	r3, #2
 8000992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000994:	2301      	movs	r3, #1
 8000996:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000998:	2301      	movs	r3, #1
 800099a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800099c:	2328      	movs	r3, #40	@ 0x28
 800099e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009a0:	2307      	movs	r3, #7
 80009a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 ff5b 	bl	800186c <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80009bc:	f000 f818 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2303      	movs	r3, #3
 80009c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	2104      	movs	r1, #4
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fb23 	bl	8002024 <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009e4:	f000 f804 	bl	80009f0 <Error_Handler>
  }
}
 80009e8:	bf00      	nop
 80009ea:	3758      	adds	r7, #88	@ 0x58
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <Error_Handler+0x8>

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <HAL_MspInit+0x44>)
 8000a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a06:	4a0e      	ldr	r2, [pc, #56]	@ (8000a40 <HAL_MspInit+0x44>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <HAL_MspInit+0x44>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <HAL_MspInit+0x44>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a1e:	4a08      	ldr	r2, [pc, #32]	@ (8000a40 <HAL_MspInit+0x44>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a24:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_MspInit+0x44>)
 8000a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <NMI_Handler+0x4>

08000a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9e:	f000 faf5 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  static uint32_t lastToggleTime = 0;
  uint32_t currentTime = HAL_GetTick();
 8000aa2:	f000 fb07 	bl	80010b4 <HAL_GetTick>
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t toggleTimeMs = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
  switch(ld2State)
 8000aac:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <SysTick_Handler+0xb0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d843      	bhi.n	8000b3e <SysTick_Handler+0xa6>
 8000ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8000abc <SysTick_Handler+0x24>)
 8000ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abc:	08000acd 	.word	0x08000acd
 8000ac0:	08000adb 	.word	0x08000adb
 8000ac4:	08000ae9 	.word	0x08000ae9
 8000ac8:	08000b11 	.word	0x08000b11
  {
  case 1:
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2120      	movs	r1, #32
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad4:	f000 fe34 	bl	8001740 <HAL_GPIO_WritePin>
	  break;
 8000ad8:	e031      	b.n	8000b3e <SysTick_Handler+0xa6>
  case 2:
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2120      	movs	r1, #32
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae2:	f000 fe2d 	bl	8001740 <HAL_GPIO_WritePin>
  	  break;
 8000ae6:	e02a      	b.n	8000b3e <SysTick_Handler+0xa6>
  case 3:
	  toggleTimeMs = slow;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <SysTick_Handler+0xb4>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	603b      	str	r3, [r7, #0]
	  if(currentTime - lastToggleTime >= toggleTimeMs)
 8000af0:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <SysTick_Handler+0xb8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d81c      	bhi.n	8000b38 <SysTick_Handler+0xa0>
	  	  {
	  		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000afe:	2120      	movs	r1, #32
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b04:	f000 fe34 	bl	8001770 <HAL_GPIO_TogglePin>
	  		  lastToggleTime = currentTime;
 8000b08:	4a11      	ldr	r2, [pc, #68]	@ (8000b50 <SysTick_Handler+0xb8>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
	  	  }
	  break;
 8000b0e:	e013      	b.n	8000b38 <SysTick_Handler+0xa0>
  case 4:
	  toggleTimeMs = slow;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <SysTick_Handler+0xb4>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	603b      	str	r3, [r7, #0]
	  if(currentTime - lastToggleTime >= toggleTimeMs)
 8000b18:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <SysTick_Handler+0xb8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d80a      	bhi.n	8000b3c <SysTick_Handler+0xa4>
	  		  	  {
	  		  		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b26:	2120      	movs	r1, #32
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2c:	f000 fe20 	bl	8001770 <HAL_GPIO_TogglePin>
	  		  		  lastToggleTime = currentTime;
 8000b30:	4a07      	ldr	r2, [pc, #28]	@ (8000b50 <SysTick_Handler+0xb8>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
	  		  	  }
	  break;
 8000b36:	e001      	b.n	8000b3c <SysTick_Handler+0xa4>
	  break;
 8000b38:	bf00      	nop
 8000b3a:	e000      	b.n	8000b3e <SysTick_Handler+0xa6>
	  break;
 8000b3c:	bf00      	nop
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000078 	.word	0x20000078
 8000b4c:	2000007c 	.word	0x2000007c
 8000b50:	20000208 	.word	0x20000208

08000b54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b58:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <USART2_IRQHandler+0x10>)
 8000b5a:	f002 fa3b 	bl	8002fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */


  /* USER CODE END USART2_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000530 	.word	0x20000530

08000b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b70:	4a14      	ldr	r2, [pc, #80]	@ (8000bc4 <_sbrk+0x5c>)
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <_sbrk+0x60>)
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <_sbrk+0x64>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	@ (8000bd0 <_sbrk+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d207      	bcs.n	8000ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b98:	f003 fe44 	bl	8004824 <__errno>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	e009      	b.n	8000bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <_sbrk+0x64>)
 8000bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bba:	68fb      	ldr	r3, [r7, #12]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20018000 	.word	0x20018000
 8000bc8:	00000400 	.word	0x00000400
 8000bcc:	2000020c 	.word	0x2000020c
 8000bd0:	20000708 	.word	0x20000708

08000bd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <ring_buffer_setup>:
uint8_t USART_RxBuf[RX_BUFFER_SIZE];

extern void FrameRd();

void ring_buffer_setup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
	rb->writeIndex = 0;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
	rb->mask = size - 1; // zakładając, że zmienna size jest potęgą 2
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	1e5a      	subs	r2, r3, #1
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	60da      	str	r2, [r3, #12]
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <USART_getchar>:
	}else{
		return 1;
	}
}

int16_t USART_getchar() {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
    if (rxRingBuffer.writeIndex != rxRingBuffer.readIndex) {
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <USART_getchar+0x4c>)
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <USART_getchar+0x4c>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d013      	beq.n	8000c66 <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[rxRingBuffer.readIndex];
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <USART_getchar+0x4c>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <USART_getchar+0x50>)
 8000c44:	5cd3      	ldrb	r3, [r2, r3]
 8000c46:	80fb      	strh	r3, [r7, #6]
        rxRingBuffer.readIndex = (rxRingBuffer.readIndex + 1) % rxRingBuffer.mask;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <USART_getchar+0x4c>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <USART_getchar+0x4c>)
 8000c50:	68d2      	ldr	r2, [r2, #12]
 8000c52:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c56:	fb01 f202 	mul.w	r2, r1, r2
 8000c5a:	1a9b      	subs	r3, r3, r2
 8000c5c:	4a06      	ldr	r2, [pc, #24]	@ (8000c78 <USART_getchar+0x4c>)
 8000c5e:	6053      	str	r3, [r2, #4]
        return tmp;
 8000c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c64:	e001      	b.n	8000c6a <USART_getchar+0x3e>
    }
    return -1; // Buffer empty
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000210 	.word	0x20000210
 8000c7c:	20000430 	.word	0x20000430

08000c80 <USART_fsend>:
        	txRingBuffer.readIndex = idx;
        }

        __enable_irq(); //ponownie aktywujemy przerwania
}
void USART_fsend(char* format,...){
 8000c80:	b40f      	push	{r0, r1, r2, r3}
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b0a4      	sub	sp, #144	@ 0x90
 8000c86:	af00      	add	r7, sp, #0
	char tmp_rs[128];
	int i;
	volatile int idx;
	va_list arglist;
	  va_start(arglist,format);
 8000c88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c8c:	607b      	str	r3, [r7, #4]
	  vsprintf(tmp_rs,format,arglist);
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 fdb1 	bl	8004800 <vsiprintf>
	  va_end(arglist);
	  idx=txRingBuffer.writeIndex;
 8000c9e:	4b30      	ldr	r3, [pc, #192]	@ (8000d60 <USART_fsend+0xe0>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	60bb      	str	r3, [r7, #8]
	  for(i=0;i<strlen(tmp_rs);i++){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000caa:	e016      	b.n	8000cda <USART_fsend+0x5a>
		  USART_TxBuf[idx]=tmp_rs[i];
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	f107 010c 	add.w	r1, r7, #12
 8000cb2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000cb6:	440a      	add	r2, r1
 8000cb8:	7811      	ldrb	r1, [r2, #0]
 8000cba:	4a2a      	ldr	r2, [pc, #168]	@ (8000d64 <USART_fsend+0xe4>)
 8000cbc:	54d1      	strb	r1, [r2, r3]
		  idx++;
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
		  if(idx >= TX_BUFFER_SIZE)idx=0;
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cca:	db01      	blt.n	8000cd0 <USART_fsend+0x50>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
	  for(i=0;i<strlen(tmp_rs);i++){
 8000cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fa80 	bl	80001e4 <strlen>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d8de      	bhi.n	8000cac <USART_fsend+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
 8000cee:	b672      	cpsid	i
}
 8000cf0:	bf00      	nop
	  }
	  __disable_irq();//wyłączamy przerwania
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <USART_fsend+0xe0>)
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <USART_fsend+0xe0>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d123      	bne.n	8000d46 <USART_fsend+0xc6>
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <USART_fsend+0xe8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	69db      	ldr	r3, [r3, #28]
 8000d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d08:	2b80      	cmp	r3, #128	@ 0x80
 8000d0a:	d11c      	bne.n	8000d46 <USART_fsend+0xc6>
		  txRingBuffer.writeIndex=idx;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <USART_fsend+0xe0>)
 8000d12:	609a      	str	r2, [r3, #8]
		  uint8_t tmp=USART_TxBuf[txRingBuffer.readIndex];
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <USART_fsend+0xe0>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	4a12      	ldr	r2, [pc, #72]	@ (8000d64 <USART_fsend+0xe4>)
 8000d1a:	5cd3      	ldrb	r3, [r2, r3]
 8000d1c:	70fb      	strb	r3, [r7, #3]
		  txRingBuffer.readIndex++;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <USART_fsend+0xe0>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a0e      	ldr	r2, [pc, #56]	@ (8000d60 <USART_fsend+0xe0>)
 8000d26:	6053      	str	r3, [r2, #4]
		  if(txRingBuffer.readIndex >= TX_BUFFER_SIZE)txRingBuffer.readIndex=0;
 8000d28:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <USART_fsend+0xe0>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d30:	d302      	bcc.n	8000d38 <USART_fsend+0xb8>
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <USART_fsend+0xe0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
		  HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000d38:	1cfb      	adds	r3, r7, #3
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480a      	ldr	r0, [pc, #40]	@ (8000d68 <USART_fsend+0xe8>)
 8000d40:	f002 f89e 	bl	8002e80 <HAL_UART_Transmit_IT>
	  if((txRingBuffer.writeIndex==txRingBuffer.readIndex)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 8000d44:	e003      	b.n	8000d4e <USART_fsend+0xce>
	  }else{
		  txRingBuffer.writeIndex=idx;
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <USART_fsend+0xe0>)
 8000d4c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d4e:	b662      	cpsie	i
}
 8000d50:	bf00      	nop
	  }
	  __enable_irq();
}
 8000d52:	bf00      	nop
 8000d54:	3790      	adds	r7, #144	@ 0x90
 8000d56:	46bd      	mov	sp, r7
 8000d58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d5c:	b004      	add	sp, #16
 8000d5e:	4770      	bx	lr
 8000d60:	20000220 	.word	0x20000220
 8000d64:	20000230 	.word	0x20000230
 8000d68:	20000530 	.word	0x20000530

08000d6c <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a13      	ldr	r2, [pc, #76]	@ (8000dc4 <HAL_UART_TxCpltCallback+0x58>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d11e      	bne.n	8000dba <HAL_UART_TxCpltCallback+0x4e>
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <HAL_UART_TxCpltCallback+0x5c>)
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <HAL_UART_TxCpltCallback+0x5c>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d018      	beq.n	8000dba <HAL_UART_TxCpltCallback+0x4e>
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
 8000d88:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <HAL_UART_TxCpltCallback+0x5c>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	4a0f      	ldr	r2, [pc, #60]	@ (8000dcc <HAL_UART_TxCpltCallback+0x60>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	73fb      	strb	r3, [r7, #15]
		   txRingBuffer.readIndex++;
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <HAL_UART_TxCpltCallback+0x5c>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	3301      	adds	r3, #1
 8000d98:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc8 <HAL_UART_TxCpltCallback+0x5c>)
 8000d9a:	6053      	str	r3, [r2, #4]
		   if(txRingBuffer.readIndex >= TX_BUFFER_SIZE) txRingBuffer.readIndex=0;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_UART_TxCpltCallback+0x5c>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000da4:	d302      	bcc.n	8000dac <HAL_UART_TxCpltCallback+0x40>
 8000da6:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <HAL_UART_TxCpltCallback+0x5c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000dac:	f107 030f 	add.w	r3, r7, #15
 8000db0:	2201      	movs	r2, #1
 8000db2:	4619      	mov	r1, r3
 8000db4:	4803      	ldr	r0, [pc, #12]	@ (8000dc4 <HAL_UART_TxCpltCallback+0x58>)
 8000db6:	f002 f863 	bl	8002e80 <HAL_UART_Transmit_IT>
	   }
   }
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000530 	.word	0x20000530
 8000dc8:	20000220 	.word	0x20000220
 8000dcc:	20000230 	.word	0x20000230

08000dd0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a14      	ldr	r2, [pc, #80]	@ (8000e2c <HAL_UART_RxCpltCallback+0x5c>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d120      	bne.n	8000e22 <HAL_UART_RxCpltCallback+0x52>
		 rxRingBuffer.writeIndex++;
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <HAL_UART_RxCpltCallback+0x60>)
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	3301      	adds	r3, #1
 8000de6:	4a12      	ldr	r2, [pc, #72]	@ (8000e30 <HAL_UART_RxCpltCallback+0x60>)
 8000de8:	6093      	str	r3, [r2, #8]
		 if(rxRingBuffer.writeIndex >= RX_BUFFER_SIZE) rxRingBuffer.writeIndex=0;
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <HAL_UART_RxCpltCallback+0x60>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	2bff      	cmp	r3, #255	@ 0xff
 8000df0:	d902      	bls.n	8000df8 <HAL_UART_RxCpltCallback+0x28>
 8000df2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <HAL_UART_RxCpltCallback+0x60>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
		 HAL_UART_Transmit_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex - 1],1);
 8000df8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <HAL_UART_RxCpltCallback+0x60>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	4a0d      	ldr	r2, [pc, #52]	@ (8000e34 <HAL_UART_RxCpltCallback+0x64>)
 8000e00:	4413      	add	r3, r2
 8000e02:	2201      	movs	r2, #1
 8000e04:	4619      	mov	r1, r3
 8000e06:	4809      	ldr	r0, [pc, #36]	@ (8000e2c <HAL_UART_RxCpltCallback+0x5c>)
 8000e08:	f002 f83a 	bl	8002e80 <HAL_UART_Transmit_IT>
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <HAL_UART_RxCpltCallback+0x60>)
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	4a08      	ldr	r2, [pc, #32]	@ (8000e34 <HAL_UART_RxCpltCallback+0x64>)
 8000e12:	4413      	add	r3, r2
 8000e14:	2201      	movs	r2, #1
 8000e16:	4619      	mov	r1, r3
 8000e18:	4804      	ldr	r0, [pc, #16]	@ (8000e2c <HAL_UART_RxCpltCallback+0x5c>)
 8000e1a:	f002 f88f 	bl	8002f3c <HAL_UART_Receive_IT>
		 FrameRd();
 8000e1e:	f7ff fc61 	bl	80006e4 <FrameRd>
	 }
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000530 	.word	0x20000530
 8000e30:	20000210 	.word	0x20000210
 8000e34:	20000430 	.word	0x20000430

08000e38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <MX_USART2_UART_Init+0x78>)
 8000e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb4 <MX_USART2_UART_Init+0x7c>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <MX_USART2_UART_Init+0x78>)
 8000e44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <MX_USART2_UART_Init+0x78>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e50:	4b17      	ldr	r3, [pc, #92]	@ (8000eb0 <MX_USART2_UART_Init+0x78>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e56:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <MX_USART2_UART_Init+0x78>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <MX_USART2_UART_Init+0x78>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e62:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <MX_USART2_UART_Init+0x78>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <MX_USART2_UART_Init+0x78>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <MX_USART2_UART_Init+0x78>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e74:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <MX_USART2_UART_Init+0x78>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7a:	480d      	ldr	r0, [pc, #52]	@ (8000eb0 <MX_USART2_UART_Init+0x78>)
 8000e7c:	f001 ffb2 	bl	8002de4 <HAL_UART_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e86:	f7ff fdb3 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  ring_buffer_setup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE);
 8000e8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e8e:	490a      	ldr	r1, [pc, #40]	@ (8000eb8 <MX_USART2_UART_Init+0x80>)
 8000e90:	480a      	ldr	r0, [pc, #40]	@ (8000ebc <MX_USART2_UART_Init+0x84>)
 8000e92:	f7ff feb1 	bl	8000bf8 <ring_buffer_setup>
  ring_buffer_setup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE);
 8000e96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e9a:	4909      	ldr	r1, [pc, #36]	@ (8000ec0 <MX_USART2_UART_Init+0x88>)
 8000e9c:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <MX_USART2_UART_Init+0x8c>)
 8000e9e:	f7ff feab 	bl	8000bf8 <ring_buffer_setup>
  HAL_UART_Receive_IT(&huart2, &USART_RxBuf[0], 1);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4904      	ldr	r1, [pc, #16]	@ (8000eb8 <MX_USART2_UART_Init+0x80>)
 8000ea6:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <MX_USART2_UART_Init+0x78>)
 8000ea8:	f002 f848 	bl	8002f3c <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000530 	.word	0x20000530
 8000eb4:	40004400 	.word	0x40004400
 8000eb8:	20000430 	.word	0x20000430
 8000ebc:	20000210 	.word	0x20000210
 8000ec0:	20000230 	.word	0x20000230
 8000ec4:	20000220 	.word	0x20000220

08000ec8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0ac      	sub	sp, #176	@ 0xb0
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2288      	movs	r2, #136	@ 0x88
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f003 fc93 	bl	8004814 <memset>
  if(uartHandle->Instance==USART2)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a25      	ldr	r2, [pc, #148]	@ (8000f88 <HAL_UART_MspInit+0xc0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d143      	bne.n	8000f80 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4618      	mov	r0, r3
 8000f06:	f001 fab1 	bl	800246c <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f10:	f7ff fd6e 	bl	80009f0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f14:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <HAL_UART_MspInit+0xc4>)
 8000f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f18:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <HAL_UART_MspInit+0xc4>)
 8000f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f20:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <HAL_UART_MspInit+0xc4>)
 8000f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <HAL_UART_MspInit+0xc4>)
 8000f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f30:	4a16      	ldr	r2, [pc, #88]	@ (8000f8c <HAL_UART_MspInit+0xc4>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <HAL_UART_MspInit+0xc4>)
 8000f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f44:	230c      	movs	r3, #12
 8000f46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f66:	4619      	mov	r1, r3
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6c:	f000 fa3e 	bl	80013ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2101      	movs	r1, #1
 8000f74:	2026      	movs	r0, #38	@ 0x26
 8000f76:	f000 f984 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f7a:	2026      	movs	r0, #38	@ 0x26
 8000f7c:	f000 f99d 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f80:	bf00      	nop
 8000f82:	37b0      	adds	r7, #176	@ 0xb0
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40004400 	.word	0x40004400
 8000f8c:	40021000 	.word	0x40021000

08000f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f94:	f7ff fe1e 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <LoopForever+0xe>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fdc <LoopForever+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f003 fc37 	bl	8004830 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc2:	f7ff fca5 	bl	8000910 <main>

08000fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc6:	e7fe      	b.n	8000fc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fd4:	08005314 	.word	0x08005314
  ldr r2, =_sbss
 8000fd8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fdc:	20000704 	.word	0x20000704

08000fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_2_IRQHandler>

08000fe2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f93d 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f000 f80e 	bl	8001014 <HAL_InitTick>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	e001      	b.n	8001008 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001004:	f7ff fcfa 	bl	80009fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001008:	79fb      	ldrb	r3, [r7, #7]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001020:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <HAL_InitTick+0x6c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d023      	beq.n	8001070 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <HAL_InitTick+0x70>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <HAL_InitTick+0x6c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f949 	bl	80012d6 <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10f      	bne.n	800106a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d809      	bhi.n	8001064 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f913 	bl	8001282 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800105c:	4a0a      	ldr	r2, [pc, #40]	@ (8001088 <HAL_InitTick+0x74>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	e007      	b.n	8001074 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e004      	b.n	8001074 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	e001      	b.n	8001074 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008
 8001084:	20000000 	.word	0x20000000
 8001088:	20000004 	.word	0x20000004

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008
 80010b0:	200005b8 	.word	0x200005b8

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200005b8 	.word	0x200005b8

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	@ (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	@ (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	@ (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	@ 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	@ 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff3e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff31 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa2 	bl	8001228 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d008      	beq.n	8001318 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2204      	movs	r2, #4
 800130a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e022      	b.n	800135e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 020e 	bic.w	r2, r2, #14
 8001326:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0201 	bic.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133c:	f003 021c 	and.w	r2, r3, #28
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	2101      	movs	r1, #1
 8001346:	fa01 f202 	lsl.w	r2, r1, r2
 800134a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800135c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d005      	beq.n	800138e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2204      	movs	r2, #4
 8001386:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e029      	b.n	80013e2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 020e 	bic.w	r2, r2, #14
 800139c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0201 	bic.w	r2, r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	f003 021c 	and.w	r2, r3, #28
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	2101      	movs	r1, #1
 80013bc:	fa01 f202 	lsl.w	r2, r1, r2
 80013c0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	4798      	blx	r3
    }
  }
  return status;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fa:	e17f      	b.n	80016fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	4013      	ands	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 8171 	beq.w	80016f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b01      	cmp	r3, #1
 800141e:	d005      	beq.n	800142c <HAL_GPIO_Init+0x40>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d130      	bne.n	800148e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001462:	2201      	movs	r2, #1
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	f003 0201 	and.w	r2, r3, #1
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b03      	cmp	r3, #3
 8001498:	d118      	bne.n	80014cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	6939      	ldr	r1, [r7, #16]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80ac 	beq.w	80016f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	4b5f      	ldr	r3, [pc, #380]	@ (800171c <HAL_GPIO_Init+0x330>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a2:	4a5e      	ldr	r2, [pc, #376]	@ (800171c <HAL_GPIO_Init+0x330>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015aa:	4b5c      	ldr	r3, [pc, #368]	@ (800171c <HAL_GPIO_Init+0x330>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001720 <HAL_GPIO_Init+0x334>)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	220f      	movs	r2, #15
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015e0:	d025      	beq.n	800162e <HAL_GPIO_Init+0x242>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001724 <HAL_GPIO_Init+0x338>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d01f      	beq.n	800162a <HAL_GPIO_Init+0x23e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001728 <HAL_GPIO_Init+0x33c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d019      	beq.n	8001626 <HAL_GPIO_Init+0x23a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4d      	ldr	r2, [pc, #308]	@ (800172c <HAL_GPIO_Init+0x340>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d013      	beq.n	8001622 <HAL_GPIO_Init+0x236>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001730 <HAL_GPIO_Init+0x344>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d00d      	beq.n	800161e <HAL_GPIO_Init+0x232>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4b      	ldr	r2, [pc, #300]	@ (8001734 <HAL_GPIO_Init+0x348>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d007      	beq.n	800161a <HAL_GPIO_Init+0x22e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4a      	ldr	r2, [pc, #296]	@ (8001738 <HAL_GPIO_Init+0x34c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d101      	bne.n	8001616 <HAL_GPIO_Init+0x22a>
 8001612:	2306      	movs	r3, #6
 8001614:	e00c      	b.n	8001630 <HAL_GPIO_Init+0x244>
 8001616:	2307      	movs	r3, #7
 8001618:	e00a      	b.n	8001630 <HAL_GPIO_Init+0x244>
 800161a:	2305      	movs	r3, #5
 800161c:	e008      	b.n	8001630 <HAL_GPIO_Init+0x244>
 800161e:	2304      	movs	r3, #4
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x244>
 8001622:	2303      	movs	r3, #3
 8001624:	e004      	b.n	8001630 <HAL_GPIO_Init+0x244>
 8001626:	2302      	movs	r3, #2
 8001628:	e002      	b.n	8001630 <HAL_GPIO_Init+0x244>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_GPIO_Init+0x244>
 800162e:	2300      	movs	r3, #0
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	f002 0203 	and.w	r2, r2, #3
 8001636:	0092      	lsls	r2, r2, #2
 8001638:	4093      	lsls	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001640:	4937      	ldr	r1, [pc, #220]	@ (8001720 <HAL_GPIO_Init+0x334>)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800164e:	4b3b      	ldr	r3, [pc, #236]	@ (800173c <HAL_GPIO_Init+0x350>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001672:	4a32      	ldr	r2, [pc, #200]	@ (800173c <HAL_GPIO_Init+0x350>)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001678:	4b30      	ldr	r3, [pc, #192]	@ (800173c <HAL_GPIO_Init+0x350>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800169c:	4a27      	ldr	r2, [pc, #156]	@ (800173c <HAL_GPIO_Init+0x350>)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016a2:	4b26      	ldr	r3, [pc, #152]	@ (800173c <HAL_GPIO_Init+0x350>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016c6:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <HAL_GPIO_Init+0x350>)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <HAL_GPIO_Init+0x350>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016f0:	4a12      	ldr	r2, [pc, #72]	@ (800173c <HAL_GPIO_Init+0x350>)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa22 f303 	lsr.w	r3, r2, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	f47f ae78 	bne.w	80013fc <HAL_GPIO_Init+0x10>
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	371c      	adds	r7, #28
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	40010000 	.word	0x40010000
 8001724:	48000400 	.word	0x48000400
 8001728:	48000800 	.word	0x48000800
 800172c:	48000c00 	.word	0x48000c00
 8001730:	48001000 	.word	0x48001000
 8001734:	48001400 	.word	0x48001400
 8001738:	48001800 	.word	0x48001800
 800173c:	40010400 	.word	0x40010400

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001750:	787b      	ldrb	r3, [r7, #1]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800175c:	e002      	b.n	8001764 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4013      	ands	r3, r2
 8001788:	041a      	lsls	r2, r3, #16
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	43d9      	mvns	r1, r3
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	400b      	ands	r3, r1
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	619a      	str	r2, [r3, #24]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <HAL_PWREx_GetVoltageRange+0x18>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40007000 	.word	0x40007000

080017c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017ce:	d130      	bne.n	8001832 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017d0:	4b23      	ldr	r3, [pc, #140]	@ (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017dc:	d038      	beq.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017de:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001864 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2232      	movs	r2, #50	@ 0x32
 80017f4:	fb02 f303 	mul.w	r3, r2, r3
 80017f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001868 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	0c9b      	lsrs	r3, r3, #18
 8001800:	3301      	adds	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001804:	e002      	b.n	800180c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3b01      	subs	r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800180c:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001814:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001818:	d102      	bne.n	8001820 <HAL_PWREx_ControlVoltageScaling+0x60>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f2      	bne.n	8001806 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001820:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800182c:	d110      	bne.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e00f      	b.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001832:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800183a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800183e:	d007      	beq.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001840:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001848:	4a05      	ldr	r2, [pc, #20]	@ (8001860 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800184e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40007000 	.word	0x40007000
 8001864:	20000000 	.word	0x20000000
 8001868:	431bde83 	.word	0x431bde83

0800186c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e3ca      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800187e:	4b97      	ldr	r3, [pc, #604]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001888:	4b94      	ldr	r3, [pc, #592]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 80e4 	beq.w	8001a68 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d007      	beq.n	80018b6 <HAL_RCC_OscConfig+0x4a>
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b0c      	cmp	r3, #12
 80018aa:	f040 808b 	bne.w	80019c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	f040 8087 	bne.w	80019c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018b6:	4b89      	ldr	r3, [pc, #548]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <HAL_RCC_OscConfig+0x62>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e3a2      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1a      	ldr	r2, [r3, #32]
 80018d2:	4b82      	ldr	r3, [pc, #520]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d004      	beq.n	80018e8 <HAL_RCC_OscConfig+0x7c>
 80018de:	4b7f      	ldr	r3, [pc, #508]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018e6:	e005      	b.n	80018f4 <HAL_RCC_OscConfig+0x88>
 80018e8:	4b7c      	ldr	r3, [pc, #496]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 80018ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d223      	bcs.n	8001940 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 fd55 	bl	80023ac <RCC_SetFlashLatencyFromMSIRange>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e383      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800190c:	4b73      	ldr	r3, [pc, #460]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a72      	ldr	r2, [pc, #456]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b70      	ldr	r3, [pc, #448]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	496d      	ldr	r1, [pc, #436]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800192a:	4b6c      	ldr	r3, [pc, #432]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	4968      	ldr	r1, [pc, #416]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 800193a:	4313      	orrs	r3, r2
 800193c:	604b      	str	r3, [r1, #4]
 800193e:	e025      	b.n	800198c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001940:	4b66      	ldr	r3, [pc, #408]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a65      	ldr	r2, [pc, #404]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001946:	f043 0308 	orr.w	r3, r3, #8
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b63      	ldr	r3, [pc, #396]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	4960      	ldr	r1, [pc, #384]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800195e:	4b5f      	ldr	r3, [pc, #380]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	495b      	ldr	r1, [pc, #364]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d109      	bne.n	800198c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4618      	mov	r0, r3
 800197e:	f000 fd15 	bl	80023ac <RCC_SetFlashLatencyFromMSIRange>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e343      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800198c:	f000 fc4a 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8001990:	4602      	mov	r2, r0
 8001992:	4b52      	ldr	r3, [pc, #328]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	091b      	lsrs	r3, r3, #4
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	4950      	ldr	r1, [pc, #320]	@ (8001ae0 <HAL_RCC_OscConfig+0x274>)
 800199e:	5ccb      	ldrb	r3, [r1, r3]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
 80019a8:	4a4e      	ldr	r2, [pc, #312]	@ (8001ae4 <HAL_RCC_OscConfig+0x278>)
 80019aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019ac:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae8 <HAL_RCC_OscConfig+0x27c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fb2f 	bl	8001014 <HAL_InitTick>
 80019b6:	4603      	mov	r3, r0
 80019b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d052      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	e327      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d032      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019cc:	4b43      	ldr	r3, [pc, #268]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a42      	ldr	r2, [pc, #264]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fb6c 	bl	80010b4 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019e0:	f7ff fb68 	bl	80010b4 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e310      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019f2:	4b3a      	ldr	r3, [pc, #232]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019fe:	4b37      	ldr	r3, [pc, #220]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a36      	ldr	r2, [pc, #216]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001a04:	f043 0308 	orr.w	r3, r3, #8
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4931      	ldr	r1, [pc, #196]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	492c      	ldr	r1, [pc, #176]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
 8001a30:	e01a      	b.n	8001a68 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a32:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a29      	ldr	r2, [pc, #164]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fb39 	bl	80010b4 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a46:	f7ff fb35 	bl	80010b4 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e2dd      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a58:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x1da>
 8001a64:	e000      	b.n	8001a68 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d074      	beq.n	8001b5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d005      	beq.n	8001a86 <HAL_RCC_OscConfig+0x21a>
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	d10e      	bne.n	8001a9e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d10b      	bne.n	8001a9e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d064      	beq.n	8001b5c <HAL_RCC_OscConfig+0x2f0>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d160      	bne.n	8001b5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e2ba      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x24a>
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0b      	ldr	r2, [pc, #44]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	e026      	b.n	8001b04 <HAL_RCC_OscConfig+0x298>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001abe:	d115      	bne.n	8001aec <HAL_RCC_OscConfig+0x280>
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a05      	ldr	r2, [pc, #20]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001ac6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a02      	ldr	r2, [pc, #8]	@ (8001adc <HAL_RCC_OscConfig+0x270>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e014      	b.n	8001b04 <HAL_RCC_OscConfig+0x298>
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	08005188 	.word	0x08005188
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000004 	.word	0x20000004
 8001aec:	4ba0      	ldr	r3, [pc, #640]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a9f      	ldr	r2, [pc, #636]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001af2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b9d      	ldr	r3, [pc, #628]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a9c      	ldr	r2, [pc, #624]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001afe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fad2 	bl	80010b4 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff face 	bl	80010b4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	@ 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e276      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b26:	4b92      	ldr	r3, [pc, #584]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0x2a8>
 8001b32:	e014      	b.n	8001b5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff fabe 	bl	80010b4 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff faba 	bl	80010b4 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	@ 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e262      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b4e:	4b88      	ldr	r3, [pc, #544]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x2d0>
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d060      	beq.n	8001c2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_OscConfig+0x310>
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	d119      	bne.n	8001baa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d116      	bne.n	8001baa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b7c:	4b7c      	ldr	r3, [pc, #496]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_OscConfig+0x328>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e23f      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b94:	4b76      	ldr	r3, [pc, #472]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	061b      	lsls	r3, r3, #24
 8001ba2:	4973      	ldr	r1, [pc, #460]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba8:	e040      	b.n	8001c2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d023      	beq.n	8001bfa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb2:	4b6f      	ldr	r3, [pc, #444]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a6e      	ldr	r2, [pc, #440]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fa79 	bl	80010b4 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7ff fa75 	bl	80010b4 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e21d      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd8:	4b65      	ldr	r3, [pc, #404]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0f0      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be4:	4b62      	ldr	r3, [pc, #392]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	061b      	lsls	r3, r3, #24
 8001bf2:	495f      	ldr	r1, [pc, #380]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
 8001bf8:	e018      	b.n	8001c2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a5c      	ldr	r2, [pc, #368]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c06:	f7ff fa55 	bl	80010b4 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7ff fa51 	bl	80010b4 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e1f9      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c20:	4b53      	ldr	r3, [pc, #332]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f0      	bne.n	8001c0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d03c      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d01c      	beq.n	8001c7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c40:	4b4b      	ldr	r3, [pc, #300]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c46:	4a4a      	ldr	r2, [pc, #296]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7ff fa30 	bl	80010b4 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c58:	f7ff fa2c 	bl	80010b4 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e1d4      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c6a:	4b41      	ldr	r3, [pc, #260]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0ef      	beq.n	8001c58 <HAL_RCC_OscConfig+0x3ec>
 8001c78:	e01b      	b.n	8001cb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c80:	4a3b      	ldr	r2, [pc, #236]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8a:	f7ff fa13 	bl	80010b4 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c92:	f7ff fa0f 	bl	80010b4 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e1b7      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ca4:	4b32      	ldr	r3, [pc, #200]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1ef      	bne.n	8001c92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80a6 	beq.w	8001e0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10d      	bne.n	8001cec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd0:	4b27      	ldr	r3, [pc, #156]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd4:	4a26      	ldr	r2, [pc, #152]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cda:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cdc:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cec:	4b21      	ldr	r3, [pc, #132]	@ (8001d74 <HAL_RCC_OscConfig+0x508>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d118      	bne.n	8001d2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d74 <HAL_RCC_OscConfig+0x508>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d74 <HAL_RCC_OscConfig+0x508>)
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d04:	f7ff f9d6 	bl	80010b4 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0c:	f7ff f9d2 	bl	80010b4 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e17a      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <HAL_RCC_OscConfig+0x508>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d108      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4d8>
 8001d32:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d38:	4a0d      	ldr	r2, [pc, #52]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d42:	e029      	b.n	8001d98 <HAL_RCC_OscConfig+0x52c>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	d115      	bne.n	8001d78 <HAL_RCC_OscConfig+0x50c>
 8001d4c:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d52:	4a07      	ldr	r2, [pc, #28]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d5c:	4b04      	ldr	r3, [pc, #16]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d62:	4a03      	ldr	r2, [pc, #12]	@ (8001d70 <HAL_RCC_OscConfig+0x504>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d6c:	e014      	b.n	8001d98 <HAL_RCC_OscConfig+0x52c>
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40007000 	.word	0x40007000
 8001d78:	4b9c      	ldr	r3, [pc, #624]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d7e:	4a9b      	ldr	r2, [pc, #620]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d88:	4b98      	ldr	r3, [pc, #608]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d8e:	4a97      	ldr	r2, [pc, #604]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d016      	beq.n	8001dce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da0:	f7ff f988 	bl	80010b4 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da8:	f7ff f984 	bl	80010b4 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e12a      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dbe:	4b8b      	ldr	r3, [pc, #556]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0ed      	beq.n	8001da8 <HAL_RCC_OscConfig+0x53c>
 8001dcc:	e015      	b.n	8001dfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dce:	f7ff f971 	bl	80010b4 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd6:	f7ff f96d 	bl	80010b4 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e113      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dec:	4b7f      	ldr	r3, [pc, #508]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1ed      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dfa:	7ffb      	ldrb	r3, [r7, #31]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d105      	bne.n	8001e0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e00:	4b7a      	ldr	r3, [pc, #488]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e04:	4a79      	ldr	r2, [pc, #484]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001e06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80fe 	beq.w	8002012 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	f040 80d0 	bne.w	8001fc0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e20:	4b72      	ldr	r3, [pc, #456]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0203 	and.w	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d130      	bne.n	8001e96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d127      	bne.n	8001e96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e50:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d11f      	bne.n	8001e96 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e60:	2a07      	cmp	r2, #7
 8001e62:	bf14      	ite	ne
 8001e64:	2201      	movne	r2, #1
 8001e66:	2200      	moveq	r2, #0
 8001e68:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d113      	bne.n	8001e96 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e78:	085b      	lsrs	r3, r3, #1
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d06e      	beq.n	8001f74 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	d069      	beq.n	8001f70 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e9c:	4b53      	ldr	r3, [pc, #332]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ea8:	4b50      	ldr	r3, [pc, #320]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0ad      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a4b      	ldr	r2, [pc, #300]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001ebe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ec2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ec4:	f7ff f8f6 	bl	80010b4 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff f8f2 	bl	80010b4 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e09a      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ede:	4b43      	ldr	r3, [pc, #268]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eea:	4b40      	ldr	r3, [pc, #256]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	4b40      	ldr	r3, [pc, #256]	@ (8001ff0 <HAL_RCC_OscConfig+0x784>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001efa:	3a01      	subs	r2, #1
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	4311      	orrs	r1, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f04:	0212      	lsls	r2, r2, #8
 8001f06:	4311      	orrs	r1, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f0c:	0852      	lsrs	r2, r2, #1
 8001f0e:	3a01      	subs	r2, #1
 8001f10:	0552      	lsls	r2, r2, #21
 8001f12:	4311      	orrs	r1, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f18:	0852      	lsrs	r2, r2, #1
 8001f1a:	3a01      	subs	r2, #1
 8001f1c:	0652      	lsls	r2, r2, #25
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f24:	0912      	lsrs	r2, r2, #4
 8001f26:	0452      	lsls	r2, r2, #17
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	4930      	ldr	r1, [pc, #192]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f30:	4b2e      	ldr	r3, [pc, #184]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a2d      	ldr	r2, [pc, #180]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a2a      	ldr	r2, [pc, #168]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f48:	f7ff f8b4 	bl	80010b4 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7ff f8b0 	bl	80010b4 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e058      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f62:	4b22      	ldr	r3, [pc, #136]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f6e:	e050      	b.n	8002012 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e04f      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f74:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d148      	bne.n	8002012 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f80:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a19      	ldr	r2, [pc, #100]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001f86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f8c:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4a16      	ldr	r2, [pc, #88]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f98:	f7ff f88c 	bl	80010b4 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7ff f888 	bl	80010b4 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e030      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x734>
 8001fbe:	e028      	b.n	8002012 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d023      	beq.n	800200e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a08      	ldr	r2, [pc, #32]	@ (8001fec <HAL_RCC_OscConfig+0x780>)
 8001fcc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7ff f86f 	bl	80010b4 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd8:	e00c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fda:	f7ff f86b 	bl	80010b4 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d905      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e013      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff4:	4b09      	ldr	r3, [pc, #36]	@ (800201c <HAL_RCC_OscConfig+0x7b0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1ec      	bne.n	8001fda <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <HAL_RCC_OscConfig+0x7b0>)
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	4905      	ldr	r1, [pc, #20]	@ (800201c <HAL_RCC_OscConfig+0x7b0>)
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <HAL_RCC_OscConfig+0x7b4>)
 8002008:	4013      	ands	r3, r2
 800200a:	60cb      	str	r3, [r1, #12]
 800200c:	e001      	b.n	8002012 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000
 8002020:	feeefffc 	.word	0xfeeefffc

08002024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0e7      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002038:	4b75      	ldr	r3, [pc, #468]	@ (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d910      	bls.n	8002068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b72      	ldr	r3, [pc, #456]	@ (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	4970      	ldr	r1, [pc, #448]	@ (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b6e      	ldr	r3, [pc, #440]	@ (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0cf      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d010      	beq.n	8002096 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	4b66      	ldr	r3, [pc, #408]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002080:	429a      	cmp	r2, r3
 8002082:	d908      	bls.n	8002096 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b63      	ldr	r3, [pc, #396]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4960      	ldr	r1, [pc, #384]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d04c      	beq.n	800213c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d121      	bne.n	80020fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0a6      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c2:	4b54      	ldr	r3, [pc, #336]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d115      	bne.n	80020fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e09a      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020da:	4b4e      	ldr	r3, [pc, #312]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e08e      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e086      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020fa:	4b46      	ldr	r3, [pc, #280]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f023 0203 	bic.w	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4943      	ldr	r1, [pc, #268]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800210c:	f7fe ffd2 	bl	80010b4 <HAL_GetTick>
 8002110:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	e00a      	b.n	800212a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002114:	f7fe ffce 	bl	80010b4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e06e      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	4b3a      	ldr	r3, [pc, #232]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 020c 	and.w	r2, r3, #12
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	429a      	cmp	r2, r3
 800213a:	d1eb      	bne.n	8002114 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d010      	beq.n	800216a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	4b31      	ldr	r3, [pc, #196]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002154:	429a      	cmp	r2, r3
 8002156:	d208      	bcs.n	800216a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4b2e      	ldr	r3, [pc, #184]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	492b      	ldr	r1, [pc, #172]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800216a:	4b29      	ldr	r3, [pc, #164]	@ (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d210      	bcs.n	800219a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002178:	4b25      	ldr	r3, [pc, #148]	@ (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 0207 	bic.w	r2, r3, #7
 8002180:	4923      	ldr	r1, [pc, #140]	@ (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	4313      	orrs	r3, r2
 8002186:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002188:	4b21      	ldr	r3, [pc, #132]	@ (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d001      	beq.n	800219a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e036      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4918      	ldr	r1, [pc, #96]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d009      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4910      	ldr	r1, [pc, #64]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021d8:	f000 f824 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b0d      	ldr	r3, [pc, #52]	@ (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	490b      	ldr	r1, [pc, #44]	@ (8002218 <HAL_RCC_ClockConfig+0x1f4>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
 80021f4:	4a09      	ldr	r2, [pc, #36]	@ (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80021f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021f8:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_RCC_ClockConfig+0x1fc>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe ff09 	bl	8001014 <HAL_InitTick>
 8002202:	4603      	mov	r3, r0
 8002204:	72fb      	strb	r3, [r7, #11]

  return status;
 8002206:	7afb      	ldrb	r3, [r7, #11]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40022000 	.word	0x40022000
 8002214:	40021000 	.word	0x40021000
 8002218:	08005188 	.word	0x08005188
 800221c:	20000000 	.word	0x20000000
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	@ 0x24
 8002228:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002232:	4b3e      	ldr	r3, [pc, #248]	@ (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800223c:	4b3b      	ldr	r3, [pc, #236]	@ (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x34>
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d121      	bne.n	8002296 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d11e      	bne.n	8002296 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002258:	4b34      	ldr	r3, [pc, #208]	@ (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d107      	bne.n	8002274 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002264:	4b31      	ldr	r3, [pc, #196]	@ (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 8002266:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	e005      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002274:	4b2d      	ldr	r3, [pc, #180]	@ (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002280:	4a2b      	ldr	r2, [pc, #172]	@ (8002330 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002288:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10d      	bne.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b04      	cmp	r3, #4
 800229a:	d102      	bne.n	80022a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800229c:	4b25      	ldr	r3, [pc, #148]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x110>)
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	e004      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022a8:	4b23      	ldr	r3, [pc, #140]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x114>)
 80022aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b0c      	cmp	r3, #12
 80022b0:	d134      	bne.n	800231c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022b2:	4b1e      	ldr	r3, [pc, #120]	@ (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d003      	beq.n	80022ca <HAL_RCC_GetSysClockFreq+0xa6>
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d003      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0xac>
 80022c8:	e005      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x110>)
 80022cc:	617b      	str	r3, [r7, #20]
      break;
 80022ce:	e005      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022d0:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x114>)
 80022d2:	617b      	str	r3, [r7, #20]
      break;
 80022d4:	e002      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	617b      	str	r3, [r7, #20]
      break;
 80022da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022dc:	4b13      	ldr	r3, [pc, #76]	@ (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	3301      	adds	r3, #1
 80022e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022ea:	4b10      	ldr	r3, [pc, #64]	@ (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	fb03 f202 	mul.w	r2, r3, r2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002300:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002302:	4b0a      	ldr	r3, [pc, #40]	@ (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	0e5b      	lsrs	r3, r3, #25
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	3301      	adds	r3, #1
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
 800231a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800231c:	69bb      	ldr	r3, [r7, #24]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	@ 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	080051a0 	.word	0x080051a0
 8002334:	00f42400 	.word	0x00f42400
 8002338:	007a1200 	.word	0x007a1200

0800233c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002340:	4b03      	ldr	r3, [pc, #12]	@ (8002350 <HAL_RCC_GetHCLKFreq+0x14>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000000 	.word	0x20000000

08002354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002358:	f7ff fff0 	bl	800233c <HAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4904      	ldr	r1, [pc, #16]	@ (800237c <HAL_RCC_GetPCLK1Freq+0x28>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	08005198 	.word	0x08005198

08002380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002384:	f7ff ffda 	bl	800233c <HAL_RCC_GetHCLKFreq>
 8002388:	4602      	mov	r2, r0
 800238a:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	0adb      	lsrs	r3, r3, #11
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	4904      	ldr	r1, [pc, #16]	@ (80023a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002396:	5ccb      	ldrb	r3, [r1, r3]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000
 80023a8:	08005198 	.word	0x08005198

080023ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023c4:	f7ff f9ee 	bl	80017a4 <HAL_PWREx_GetVoltageRange>
 80023c8:	6178      	str	r0, [r7, #20]
 80023ca:	e014      	b.n	80023f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023cc:	4b25      	ldr	r3, [pc, #148]	@ (8002464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d0:	4a24      	ldr	r2, [pc, #144]	@ (8002464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80023d8:	4b22      	ldr	r3, [pc, #136]	@ (8002464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023e4:	f7ff f9de 	bl	80017a4 <HAL_PWREx_GetVoltageRange>
 80023e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023fc:	d10b      	bne.n	8002416 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b80      	cmp	r3, #128	@ 0x80
 8002402:	d919      	bls.n	8002438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2ba0      	cmp	r3, #160	@ 0xa0
 8002408:	d902      	bls.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800240a:	2302      	movs	r3, #2
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	e013      	b.n	8002438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002410:	2301      	movs	r3, #1
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	e010      	b.n	8002438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b80      	cmp	r3, #128	@ 0x80
 800241a:	d902      	bls.n	8002422 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800241c:	2303      	movs	r3, #3
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	e00a      	b.n	8002438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b80      	cmp	r3, #128	@ 0x80
 8002426:	d102      	bne.n	800242e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002428:	2302      	movs	r3, #2
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	e004      	b.n	8002438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b70      	cmp	r3, #112	@ 0x70
 8002432:	d101      	bne.n	8002438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002434:	2301      	movs	r3, #1
 8002436:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002438:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 0207 	bic.w	r2, r3, #7
 8002440:	4909      	ldr	r1, [pc, #36]	@ (8002468 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002448:	4b07      	ldr	r3, [pc, #28]	@ (8002468 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	429a      	cmp	r2, r3
 8002454:	d001      	beq.n	800245a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	40022000 	.word	0x40022000

0800246c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002474:	2300      	movs	r3, #0
 8002476:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002478:	2300      	movs	r3, #0
 800247a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002484:	2b00      	cmp	r3, #0
 8002486:	d041      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800248c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002490:	d02a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002492:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002496:	d824      	bhi.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002498:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800249c:	d008      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800249e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80024a2:	d81e      	bhi.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024ac:	d010      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024ae:	e018      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024b0:	4b86      	ldr	r3, [pc, #536]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4a85      	ldr	r2, [pc, #532]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024bc:	e015      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fabb 	bl	8002a40 <RCCEx_PLLSAI1_Config>
 80024ca:	4603      	mov	r3, r0
 80024cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024ce:	e00c      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3320      	adds	r3, #32
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fba6 	bl	8002c28 <RCCEx_PLLSAI2_Config>
 80024dc:	4603      	mov	r3, r0
 80024de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024e0:	e003      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	74fb      	strb	r3, [r7, #19]
      break;
 80024e6:	e000      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ea:	7cfb      	ldrb	r3, [r7, #19]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024f0:	4b76      	ldr	r3, [pc, #472]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024fe:	4973      	ldr	r1, [pc, #460]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002506:	e001      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d041      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800251c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002520:	d02a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002522:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002526:	d824      	bhi.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002528:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800252c:	d008      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800252e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002532:	d81e      	bhi.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800253c:	d010      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800253e:	e018      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002540:	4b62      	ldr	r3, [pc, #392]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4a61      	ldr	r2, [pc, #388]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800254c:	e015      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3304      	adds	r3, #4
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fa73 	bl	8002a40 <RCCEx_PLLSAI1_Config>
 800255a:	4603      	mov	r3, r0
 800255c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800255e:	e00c      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3320      	adds	r3, #32
 8002564:	2100      	movs	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fb5e 	bl	8002c28 <RCCEx_PLLSAI2_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002570:	e003      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	74fb      	strb	r3, [r7, #19]
      break;
 8002576:	e000      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800257a:	7cfb      	ldrb	r3, [r7, #19]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10b      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002580:	4b52      	ldr	r3, [pc, #328]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002586:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800258e:	494f      	ldr	r1, [pc, #316]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002596:	e001      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80a0 	beq.w	80026ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025ae:	4b47      	ldr	r3, [pc, #284]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025be:	2300      	movs	r3, #0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00d      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c4:	4b41      	ldr	r3, [pc, #260]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c8:	4a40      	ldr	r2, [pc, #256]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80025d0:	4b3e      	ldr	r3, [pc, #248]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025dc:	2301      	movs	r3, #1
 80025de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e0:	4b3b      	ldr	r3, [pc, #236]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a3a      	ldr	r2, [pc, #232]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025ec:	f7fe fd62 	bl	80010b4 <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025f2:	e009      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fd5e 	bl	80010b4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d902      	bls.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	74fb      	strb	r3, [r7, #19]
        break;
 8002606:	e005      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002608:	4b31      	ldr	r3, [pc, #196]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ef      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d15c      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800261a:	4b2c      	ldr	r3, [pc, #176]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002620:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002624:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01f      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	d019      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002638:	4b24      	ldr	r3, [pc, #144]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002642:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002644:	4b21      	ldr	r3, [pc, #132]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264a:	4a20      	ldr	r2, [pc, #128]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002654:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265a:	4a1c      	ldr	r2, [pc, #112]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002664:	4a19      	ldr	r2, [pc, #100]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7fe fd1d 	bl	80010b4 <HAL_GetTick>
 800267a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267c:	e00b      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7fe fd19 	bl	80010b4 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d902      	bls.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	74fb      	strb	r3, [r7, #19]
            break;
 8002694:	e006      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002696:	4b0d      	ldr	r3, [pc, #52]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ec      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026aa:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ba:	4904      	ldr	r1, [pc, #16]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80026c2:	e009      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	74bb      	strb	r3, [r7, #18]
 80026c8:	e006      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d8:	7c7b      	ldrb	r3, [r7, #17]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d105      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026de:	4b9e      	ldr	r3, [pc, #632]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e2:	4a9d      	ldr	r2, [pc, #628]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026f6:	4b98      	ldr	r3, [pc, #608]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fc:	f023 0203 	bic.w	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002704:	4994      	ldr	r1, [pc, #592]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002718:	4b8f      	ldr	r3, [pc, #572]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271e:	f023 020c 	bic.w	r2, r3, #12
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002726:	498c      	ldr	r1, [pc, #560]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800273a:	4b87      	ldr	r3, [pc, #540]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002740:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	4983      	ldr	r1, [pc, #524]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800275c:	4b7e      	ldr	r3, [pc, #504]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002762:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	497b      	ldr	r1, [pc, #492]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800277e:	4b76      	ldr	r3, [pc, #472]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002784:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800278c:	4972      	ldr	r1, [pc, #456]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027a0:	4b6d      	ldr	r3, [pc, #436]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ae:	496a      	ldr	r1, [pc, #424]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027c2:	4b65      	ldr	r3, [pc, #404]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	4961      	ldr	r1, [pc, #388]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f2:	4959      	ldr	r1, [pc, #356]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002806:	4b54      	ldr	r3, [pc, #336]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002814:	4950      	ldr	r1, [pc, #320]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002828:	4b4b      	ldr	r3, [pc, #300]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002836:	4948      	ldr	r1, [pc, #288]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800284a:	4b43      	ldr	r3, [pc, #268]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002850:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002858:	493f      	ldr	r1, [pc, #252]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d028      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800286c:	4b3a      	ldr	r3, [pc, #232]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002872:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800287a:	4937      	ldr	r1, [pc, #220]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002886:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800288a:	d106      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800288c:	4b32      	ldr	r3, [pc, #200]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a31      	ldr	r2, [pc, #196]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002892:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002896:	60d3      	str	r3, [r2, #12]
 8002898:	e011      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800289e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028a2:	d10c      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3304      	adds	r3, #4
 80028a8:	2101      	movs	r1, #1
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f8c8 	bl	8002a40 <RCCEx_PLLSAI1_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028b4:	7cfb      	ldrb	r3, [r7, #19]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d028      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028ca:	4b23      	ldr	r3, [pc, #140]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d8:	491f      	ldr	r1, [pc, #124]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028e8:	d106      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028f4:	60d3      	str	r3, [r2, #12]
 80028f6:	e011      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002900:	d10c      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3304      	adds	r3, #4
 8002906:	2101      	movs	r1, #1
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f899 	bl	8002a40 <RCCEx_PLLSAI1_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002912:	7cfb      	ldrb	r3, [r7, #19]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d02b      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002928:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002936:	4908      	ldr	r1, [pc, #32]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002942:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002946:	d109      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002948:	4b03      	ldr	r3, [pc, #12]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4a02      	ldr	r2, [pc, #8]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002952:	60d3      	str	r3, [r2, #12]
 8002954:	e014      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002960:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002964:	d10c      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3304      	adds	r3, #4
 800296a:	2101      	movs	r1, #1
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f867 	bl	8002a40 <RCCEx_PLLSAI1_Config>
 8002972:	4603      	mov	r3, r0
 8002974:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002976:	7cfb      	ldrb	r3, [r7, #19]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800297c:	7cfb      	ldrb	r3, [r7, #19]
 800297e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d02f      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800298c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002992:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800299a:	4928      	ldr	r1, [pc, #160]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029aa:	d10d      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3304      	adds	r3, #4
 80029b0:	2102      	movs	r1, #2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f844 	bl	8002a40 <RCCEx_PLLSAI1_Config>
 80029b8:	4603      	mov	r3, r0
 80029ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d014      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029c2:	7cfb      	ldrb	r3, [r7, #19]
 80029c4:	74bb      	strb	r3, [r7, #18]
 80029c6:	e011      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029d0:	d10c      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3320      	adds	r3, #32
 80029d6:	2102      	movs	r1, #2
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 f925 	bl	8002c28 <RCCEx_PLLSAI2_Config>
 80029de:	4603      	mov	r3, r0
 80029e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029e2:	7cfb      	ldrb	r3, [r7, #19]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029f8:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029fe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a06:	490d      	ldr	r1, [pc, #52]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a1a:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a20:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a2a:	4904      	ldr	r1, [pc, #16]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a32:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40021000 	.word	0x40021000

08002a40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a4e:	4b75      	ldr	r3, [pc, #468]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d018      	beq.n	8002a8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a5a:	4b72      	ldr	r3, [pc, #456]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f003 0203 	and.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d10d      	bne.n	8002a86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a72:	4b6c      	ldr	r3, [pc, #432]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
       ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d047      	beq.n	8002b16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	e044      	b.n	8002b16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d018      	beq.n	8002ac6 <RCCEx_PLLSAI1_Config+0x86>
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d825      	bhi.n	8002ae4 <RCCEx_PLLSAI1_Config+0xa4>
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d002      	beq.n	8002aa2 <RCCEx_PLLSAI1_Config+0x62>
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d009      	beq.n	8002ab4 <RCCEx_PLLSAI1_Config+0x74>
 8002aa0:	e020      	b.n	8002ae4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aa2:	4b60      	ldr	r3, [pc, #384]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d11d      	bne.n	8002aea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab2:	e01a      	b.n	8002aea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d116      	bne.n	8002aee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac4:	e013      	b.n	8002aee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ac6:	4b57      	ldr	r3, [pc, #348]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ad2:	4b54      	ldr	r3, [pc, #336]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ae2:	e006      	b.n	8002af2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae8:	e004      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aea:	bf00      	nop
 8002aec:	e002      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aee:	bf00      	nop
 8002af0:	e000      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002af2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10d      	bne.n	8002b16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002afa:	4b4a      	ldr	r3, [pc, #296]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6819      	ldr	r1, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	4944      	ldr	r1, [pc, #272]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d17d      	bne.n	8002c18 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b1c:	4b41      	ldr	r3, [pc, #260]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a40      	ldr	r2, [pc, #256]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b28:	f7fe fac4 	bl	80010b4 <HAL_GetTick>
 8002b2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b2e:	e009      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b30:	f7fe fac0 	bl	80010b4 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d902      	bls.n	8002b44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	73fb      	strb	r3, [r7, #15]
        break;
 8002b42:	e005      	b.n	8002b50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b44:	4b37      	ldr	r3, [pc, #220]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ef      	bne.n	8002b30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d160      	bne.n	8002c18 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d111      	bne.n	8002b80 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b5c:	4b31      	ldr	r3, [pc, #196]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6892      	ldr	r2, [r2, #8]
 8002b6c:	0211      	lsls	r1, r2, #8
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68d2      	ldr	r2, [r2, #12]
 8002b72:	0912      	lsrs	r2, r2, #4
 8002b74:	0452      	lsls	r2, r2, #17
 8002b76:	430a      	orrs	r2, r1
 8002b78:	492a      	ldr	r1, [pc, #168]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	610b      	str	r3, [r1, #16]
 8002b7e:	e027      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d112      	bne.n	8002bac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b86:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b8e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6892      	ldr	r2, [r2, #8]
 8002b96:	0211      	lsls	r1, r2, #8
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6912      	ldr	r2, [r2, #16]
 8002b9c:	0852      	lsrs	r2, r2, #1
 8002b9e:	3a01      	subs	r2, #1
 8002ba0:	0552      	lsls	r2, r2, #21
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	491f      	ldr	r1, [pc, #124]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	610b      	str	r3, [r1, #16]
 8002baa:	e011      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bac:	4b1d      	ldr	r3, [pc, #116]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002bb4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6892      	ldr	r2, [r2, #8]
 8002bbc:	0211      	lsls	r1, r2, #8
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6952      	ldr	r2, [r2, #20]
 8002bc2:	0852      	lsrs	r2, r2, #1
 8002bc4:	3a01      	subs	r2, #1
 8002bc6:	0652      	lsls	r2, r2, #25
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	4916      	ldr	r1, [pc, #88]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bd0:	4b14      	ldr	r3, [pc, #80]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a13      	ldr	r2, [pc, #76]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7fe fa6a 	bl	80010b4 <HAL_GetTick>
 8002be0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002be2:	e009      	b.n	8002bf8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002be4:	f7fe fa66 	bl	80010b4 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d902      	bls.n	8002bf8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	73fb      	strb	r3, [r7, #15]
          break;
 8002bf6:	e005      	b.n	8002c04 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0ef      	beq.n	8002be4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c0a:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	4904      	ldr	r1, [pc, #16]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000

08002c28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c36:	4b6a      	ldr	r3, [pc, #424]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d018      	beq.n	8002c74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c42:	4b67      	ldr	r3, [pc, #412]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 0203 	and.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d10d      	bne.n	8002c6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
       ||
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c5a:	4b61      	ldr	r3, [pc, #388]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
       ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d047      	beq.n	8002cfe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
 8002c72:	e044      	b.n	8002cfe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d018      	beq.n	8002cae <RCCEx_PLLSAI2_Config+0x86>
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d825      	bhi.n	8002ccc <RCCEx_PLLSAI2_Config+0xa4>
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d002      	beq.n	8002c8a <RCCEx_PLLSAI2_Config+0x62>
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d009      	beq.n	8002c9c <RCCEx_PLLSAI2_Config+0x74>
 8002c88:	e020      	b.n	8002ccc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c8a:	4b55      	ldr	r3, [pc, #340]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d11d      	bne.n	8002cd2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c9a:	e01a      	b.n	8002cd2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c9c:	4b50      	ldr	r3, [pc, #320]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d116      	bne.n	8002cd6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cac:	e013      	b.n	8002cd6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cae:	4b4c      	ldr	r3, [pc, #304]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10f      	bne.n	8002cda <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cba:	4b49      	ldr	r3, [pc, #292]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cca:	e006      	b.n	8002cda <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd0:	e004      	b.n	8002cdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e002      	b.n	8002cdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cd6:	bf00      	nop
 8002cd8:	e000      	b.n	8002cdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cda:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10d      	bne.n	8002cfe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6819      	ldr	r1, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	4939      	ldr	r1, [pc, #228]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d167      	bne.n	8002dd4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d04:	4b36      	ldr	r3, [pc, #216]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a35      	ldr	r2, [pc, #212]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d10:	f7fe f9d0 	bl	80010b4 <HAL_GetTick>
 8002d14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d16:	e009      	b.n	8002d2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d18:	f7fe f9cc 	bl	80010b4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d902      	bls.n	8002d2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	73fb      	strb	r3, [r7, #15]
        break;
 8002d2a:	e005      	b.n	8002d38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ef      	bne.n	8002d18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d14a      	bne.n	8002dd4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d111      	bne.n	8002d68 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d44:	4b26      	ldr	r3, [pc, #152]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6892      	ldr	r2, [r2, #8]
 8002d54:	0211      	lsls	r1, r2, #8
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68d2      	ldr	r2, [r2, #12]
 8002d5a:	0912      	lsrs	r2, r2, #4
 8002d5c:	0452      	lsls	r2, r2, #17
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	491f      	ldr	r1, [pc, #124]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	614b      	str	r3, [r1, #20]
 8002d66:	e011      	b.n	8002d8c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d68:	4b1d      	ldr	r3, [pc, #116]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d70:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6892      	ldr	r2, [r2, #8]
 8002d78:	0211      	lsls	r1, r2, #8
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6912      	ldr	r2, [r2, #16]
 8002d7e:	0852      	lsrs	r2, r2, #1
 8002d80:	3a01      	subs	r2, #1
 8002d82:	0652      	lsls	r2, r2, #25
 8002d84:	430a      	orrs	r2, r1
 8002d86:	4916      	ldr	r1, [pc, #88]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d8c:	4b14      	ldr	r3, [pc, #80]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a13      	ldr	r2, [pc, #76]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7fe f98c 	bl	80010b4 <HAL_GetTick>
 8002d9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d9e:	e009      	b.n	8002db4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002da0:	f7fe f988 	bl	80010b4 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d902      	bls.n	8002db4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	73fb      	strb	r3, [r7, #15]
          break;
 8002db2:	e005      	b.n	8002dc0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002db4:	4b0a      	ldr	r3, [pc, #40]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ef      	beq.n	8002da0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002dc6:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	4904      	ldr	r1, [pc, #16]	@ (8002de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000

08002de4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e040      	b.n	8002e78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fe f85e 	bl	8000ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2224      	movs	r2, #36	@ 0x24
 8002e10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fea6 	bl	8003b7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fbeb 	bl	800360c <UART_SetConfig>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e01b      	b.n	8002e78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 ff25 	bl	8003cc0 <UART_CheckIdleState>
 8002e76:	4603      	mov	r3, r0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b08b      	sub	sp, #44	@ 0x2c
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d147      	bne.n	8002f26 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_UART_Transmit_IT+0x22>
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e040      	b.n	8002f28 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	88fa      	ldrh	r2, [r7, #6]
 8002eb0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	88fa      	ldrh	r2, [r7, #6]
 8002eb8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2221      	movs	r2, #33	@ 0x21
 8002ece:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed8:	d107      	bne.n	8002eea <HAL_UART_Transmit_IT+0x6a>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4a13      	ldr	r2, [pc, #76]	@ (8002f34 <HAL_UART_Transmit_IT+0xb4>)
 8002ee6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002ee8:	e002      	b.n	8002ef0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4a12      	ldr	r2, [pc, #72]	@ (8002f38 <HAL_UART_Transmit_IT+0xb8>)
 8002eee:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	e853 3f00 	ldrex	r3, [r3]
 8002efc:	613b      	str	r3, [r7, #16]
   return(result);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	623b      	str	r3, [r7, #32]
 8002f10:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	69f9      	ldr	r1, [r7, #28]
 8002f14:	6a3a      	ldr	r2, [r7, #32]
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1e6      	bne.n	8002ef0 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e000      	b.n	8002f28 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
  }
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	372c      	adds	r7, #44	@ 0x2c
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	08004223 	.word	0x08004223
 8002f38:	0800416d 	.word	0x0800416d

08002f3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	@ 0x28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f50:	2b20      	cmp	r3, #32
 8002f52:	d137      	bne.n	8002fc4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <HAL_UART_Receive_IT+0x24>
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e030      	b.n	8002fc6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a18      	ldr	r2, [pc, #96]	@ (8002fd0 <HAL_UART_Receive_IT+0x94>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d01f      	beq.n	8002fb4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d018      	beq.n	8002fb4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	623b      	str	r3, [r7, #32]
 8002fa2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa4:	69f9      	ldr	r1, [r7, #28]
 8002fa6:	6a3a      	ldr	r2, [r7, #32]
 8002fa8:	e841 2300 	strex	r3, r2, [r1]
 8002fac:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e6      	bne.n	8002f82 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 ff96 	bl	8003eec <UART_Start_Receive_IT>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	e000      	b.n	8002fc6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fc4:	2302      	movs	r3, #2
  }
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3728      	adds	r7, #40	@ 0x28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40008000 	.word	0x40008000

08002fd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b0ba      	sub	sp, #232	@ 0xe8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ffa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002ffe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003002:	4013      	ands	r3, r2
 8003004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d115      	bne.n	800303c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00f      	beq.n	800303c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800301c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d009      	beq.n	800303c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 82ca 	beq.w	80035c6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
      }
      return;
 800303a:	e2c4      	b.n	80035c6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800303c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8117 	beq.w	8003274 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003052:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003056:	4b85      	ldr	r3, [pc, #532]	@ (800326c <HAL_UART_IRQHandler+0x298>)
 8003058:	4013      	ands	r3, r2
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 810a 	beq.w	8003274 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d011      	beq.n	8003090 <HAL_UART_IRQHandler+0xbc>
 800306c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2201      	movs	r2, #1
 800307e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d011      	beq.n	80030c0 <HAL_UART_IRQHandler+0xec>
 800309c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00b      	beq.n	80030c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2202      	movs	r2, #2
 80030ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030b6:	f043 0204 	orr.w	r2, r3, #4
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d011      	beq.n	80030f0 <HAL_UART_IRQHandler+0x11c>
 80030cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00b      	beq.n	80030f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2204      	movs	r2, #4
 80030de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030e6:	f043 0202 	orr.w	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d017      	beq.n	800312c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d105      	bne.n	8003114 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800310c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00b      	beq.n	800312c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2208      	movs	r2, #8
 800311a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003122:	f043 0208 	orr.w	r2, r3, #8
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800312c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003134:	2b00      	cmp	r3, #0
 8003136:	d012      	beq.n	800315e <HAL_UART_IRQHandler+0x18a>
 8003138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800313c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00c      	beq.n	800315e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800314c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003154:	f043 0220 	orr.w	r2, r3, #32
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8230 	beq.w	80035ca <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800316a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00d      	beq.n	8003192 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003198:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a6:	2b40      	cmp	r3, #64	@ 0x40
 80031a8:	d005      	beq.n	80031b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d04f      	beq.n	8003256 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 ff5e 	bl	8004078 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c6:	2b40      	cmp	r3, #64	@ 0x40
 80031c8:	d141      	bne.n	800324e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3308      	adds	r3, #8
 80031d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3308      	adds	r3, #8
 80031f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003202:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800320e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1d9      	bne.n	80031ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321a:	2b00      	cmp	r3, #0
 800321c:	d013      	beq.n	8003246 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003222:	4a13      	ldr	r2, [pc, #76]	@ (8003270 <HAL_UART_IRQHandler+0x29c>)
 8003224:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe f89d 	bl	800136a <HAL_DMA_Abort_IT>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d017      	beq.n	8003266 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800323a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003240:	4610      	mov	r0, r2
 8003242:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	e00f      	b.n	8003266 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f9ca 	bl	80035e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324c:	e00b      	b.n	8003266 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f9c6 	bl	80035e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	e007      	b.n	8003266 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f9c2 	bl	80035e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003264:	e1b1      	b.n	80035ca <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003266:	bf00      	nop
    return;
 8003268:	e1af      	b.n	80035ca <HAL_UART_IRQHandler+0x5f6>
 800326a:	bf00      	nop
 800326c:	04000120 	.word	0x04000120
 8003270:	08004141 	.word	0x08004141

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003278:	2b01      	cmp	r3, #1
 800327a:	f040 816a 	bne.w	8003552 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800327e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 8163 	beq.w	8003552 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800328c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 815c 	beq.w	8003552 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2210      	movs	r2, #16
 80032a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ac:	2b40      	cmp	r3, #64	@ 0x40
 80032ae:	f040 80d4 	bne.w	800345a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80ad 	beq.w	8003422 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80032ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032d2:	429a      	cmp	r2, r3
 80032d4:	f080 80a5 	bcs.w	8003422 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f040 8086 	bne.w	8003400 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003300:	e853 3f00 	ldrex	r3, [r3]
 8003304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003308:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800330c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003310:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800331e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003322:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003326:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800332a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003336:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1da      	bne.n	80032f4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3308      	adds	r3, #8
 8003344:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003346:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003348:	e853 3f00 	ldrex	r3, [r3]
 800334c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800334e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3308      	adds	r3, #8
 800335e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003362:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003366:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003368:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800336a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003374:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e1      	bne.n	800333e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3308      	adds	r3, #8
 8003380:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003382:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003384:	e853 3f00 	ldrex	r3, [r3]
 8003388:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800338a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800338c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003390:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3308      	adds	r3, #8
 800339a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800339e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e3      	bne.n	800337a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033c8:	e853 3f00 	ldrex	r3, [r3]
 80033cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033d0:	f023 0310 	bic.w	r3, r3, #16
 80033d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033ea:	e841 2300 	strex	r3, r2, [r1]
 80033ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e4      	bne.n	80033c0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd ff77 	bl	80012ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003412:	b29b      	uxth	r3, r3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	b29b      	uxth	r3, r3
 8003418:	4619      	mov	r1, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8ea 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003420:	e0d5      	b.n	80035ce <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003428:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800342c:	429a      	cmp	r2, r3
 800342e:	f040 80ce 	bne.w	80035ce <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b20      	cmp	r3, #32
 8003440:	f040 80c5 	bne.w	80035ce <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003450:	4619      	mov	r1, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f8ce 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
      return;
 8003458:	e0b9      	b.n	80035ce <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003466:	b29b      	uxth	r3, r3
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80ab 	beq.w	80035d2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800347c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80a6 	beq.w	80035d2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348e:	e853 3f00 	ldrex	r3, [r3]
 8003492:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003496:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800349a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e4      	bne.n	8003486 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3308      	adds	r3, #8
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	e853 3f00 	ldrex	r3, [r3]
 80034ca:	623b      	str	r3, [r7, #32]
   return(result);
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3308      	adds	r3, #8
 80034dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80034e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034e8:	e841 2300 	strex	r3, r2, [r1]
 80034ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e3      	bne.n	80034bc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	e853 3f00 	ldrex	r3, [r3]
 8003514:	60fb      	str	r3, [r7, #12]
   return(result);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f023 0310 	bic.w	r3, r3, #16
 800351c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	69b9      	ldr	r1, [r7, #24]
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	617b      	str	r3, [r7, #20]
   return(result);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e4      	bne.n	8003508 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003544:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003548:	4619      	mov	r1, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f852 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003550:	e03f      	b.n	80035d2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00e      	beq.n	800357c <HAL_UART_IRQHandler+0x5a8>
 800355e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003572:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f001 f89b 	bl	80046b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800357a:	e02d      	b.n	80035d8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800357c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00e      	beq.n	80035a6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800358c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01c      	beq.n	80035d6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
    }
    return;
 80035a4:	e017      	b.n	80035d6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d012      	beq.n	80035d8 <HAL_UART_IRQHandler+0x604>
 80035b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00c      	beq.n	80035d8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fe8f 	bl	80042e2 <UART_EndTransmit_IT>
    return;
 80035c4:	e008      	b.n	80035d8 <HAL_UART_IRQHandler+0x604>
      return;
 80035c6:	bf00      	nop
 80035c8:	e006      	b.n	80035d8 <HAL_UART_IRQHandler+0x604>
    return;
 80035ca:	bf00      	nop
 80035cc:	e004      	b.n	80035d8 <HAL_UART_IRQHandler+0x604>
      return;
 80035ce:	bf00      	nop
 80035d0:	e002      	b.n	80035d8 <HAL_UART_IRQHandler+0x604>
      return;
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <HAL_UART_IRQHandler+0x604>
    return;
 80035d6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035d8:	37e8      	adds	r7, #232	@ 0xe8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop

080035e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800360c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003610:	b08a      	sub	sp, #40	@ 0x28
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	431a      	orrs	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	431a      	orrs	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	4313      	orrs	r3, r2
 8003632:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4ba4      	ldr	r3, [pc, #656]	@ (80038cc <UART_SetConfig+0x2c0>)
 800363c:	4013      	ands	r3, r2
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003644:	430b      	orrs	r3, r1
 8003646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a99      	ldr	r2, [pc, #612]	@ (80038d0 <UART_SetConfig+0x2c4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003674:	4313      	orrs	r3, r2
 8003676:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003688:	430a      	orrs	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a90      	ldr	r2, [pc, #576]	@ (80038d4 <UART_SetConfig+0x2c8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d126      	bne.n	80036e4 <UART_SetConfig+0xd8>
 8003696:	4b90      	ldr	r3, [pc, #576]	@ (80038d8 <UART_SetConfig+0x2cc>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d81b      	bhi.n	80036dc <UART_SetConfig+0xd0>
 80036a4:	a201      	add	r2, pc, #4	@ (adr r2, 80036ac <UART_SetConfig+0xa0>)
 80036a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036aa:	bf00      	nop
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036cd 	.word	0x080036cd
 80036b4:	080036c5 	.word	0x080036c5
 80036b8:	080036d5 	.word	0x080036d5
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036c2:	e116      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80036c4:	2302      	movs	r3, #2
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ca:	e112      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80036cc:	2304      	movs	r3, #4
 80036ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036d2:	e10e      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80036d4:	2308      	movs	r3, #8
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036da:	e10a      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80036dc:	2310      	movs	r3, #16
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e2:	e106      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a7c      	ldr	r2, [pc, #496]	@ (80038dc <UART_SetConfig+0x2d0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d138      	bne.n	8003760 <UART_SetConfig+0x154>
 80036ee:	4b7a      	ldr	r3, [pc, #488]	@ (80038d8 <UART_SetConfig+0x2cc>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	d82d      	bhi.n	8003758 <UART_SetConfig+0x14c>
 80036fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003704 <UART_SetConfig+0xf8>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003739 	.word	0x08003739
 8003708:	08003759 	.word	0x08003759
 800370c:	08003759 	.word	0x08003759
 8003710:	08003759 	.word	0x08003759
 8003714:	08003749 	.word	0x08003749
 8003718:	08003759 	.word	0x08003759
 800371c:	08003759 	.word	0x08003759
 8003720:	08003759 	.word	0x08003759
 8003724:	08003741 	.word	0x08003741
 8003728:	08003759 	.word	0x08003759
 800372c:	08003759 	.word	0x08003759
 8003730:	08003759 	.word	0x08003759
 8003734:	08003751 	.word	0x08003751
 8003738:	2300      	movs	r3, #0
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800373e:	e0d8      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003740:	2302      	movs	r3, #2
 8003742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003746:	e0d4      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003748:	2304      	movs	r3, #4
 800374a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800374e:	e0d0      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003750:	2308      	movs	r3, #8
 8003752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003756:	e0cc      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003758:	2310      	movs	r3, #16
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800375e:	e0c8      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a5e      	ldr	r2, [pc, #376]	@ (80038e0 <UART_SetConfig+0x2d4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d125      	bne.n	80037b6 <UART_SetConfig+0x1aa>
 800376a:	4b5b      	ldr	r3, [pc, #364]	@ (80038d8 <UART_SetConfig+0x2cc>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003770:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003774:	2b30      	cmp	r3, #48	@ 0x30
 8003776:	d016      	beq.n	80037a6 <UART_SetConfig+0x19a>
 8003778:	2b30      	cmp	r3, #48	@ 0x30
 800377a:	d818      	bhi.n	80037ae <UART_SetConfig+0x1a2>
 800377c:	2b20      	cmp	r3, #32
 800377e:	d00a      	beq.n	8003796 <UART_SetConfig+0x18a>
 8003780:	2b20      	cmp	r3, #32
 8003782:	d814      	bhi.n	80037ae <UART_SetConfig+0x1a2>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <UART_SetConfig+0x182>
 8003788:	2b10      	cmp	r3, #16
 800378a:	d008      	beq.n	800379e <UART_SetConfig+0x192>
 800378c:	e00f      	b.n	80037ae <UART_SetConfig+0x1a2>
 800378e:	2300      	movs	r3, #0
 8003790:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003794:	e0ad      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003796:	2302      	movs	r3, #2
 8003798:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800379c:	e0a9      	b.n	80038f2 <UART_SetConfig+0x2e6>
 800379e:	2304      	movs	r3, #4
 80037a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037a4:	e0a5      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80037a6:	2308      	movs	r3, #8
 80037a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ac:	e0a1      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80037ae:	2310      	movs	r3, #16
 80037b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b4:	e09d      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a4a      	ldr	r2, [pc, #296]	@ (80038e4 <UART_SetConfig+0x2d8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d125      	bne.n	800380c <UART_SetConfig+0x200>
 80037c0:	4b45      	ldr	r3, [pc, #276]	@ (80038d8 <UART_SetConfig+0x2cc>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80037ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80037cc:	d016      	beq.n	80037fc <UART_SetConfig+0x1f0>
 80037ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80037d0:	d818      	bhi.n	8003804 <UART_SetConfig+0x1f8>
 80037d2:	2b80      	cmp	r3, #128	@ 0x80
 80037d4:	d00a      	beq.n	80037ec <UART_SetConfig+0x1e0>
 80037d6:	2b80      	cmp	r3, #128	@ 0x80
 80037d8:	d814      	bhi.n	8003804 <UART_SetConfig+0x1f8>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <UART_SetConfig+0x1d8>
 80037de:	2b40      	cmp	r3, #64	@ 0x40
 80037e0:	d008      	beq.n	80037f4 <UART_SetConfig+0x1e8>
 80037e2:	e00f      	b.n	8003804 <UART_SetConfig+0x1f8>
 80037e4:	2300      	movs	r3, #0
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ea:	e082      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80037ec:	2302      	movs	r3, #2
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037f2:	e07e      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80037f4:	2304      	movs	r3, #4
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037fa:	e07a      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80037fc:	2308      	movs	r3, #8
 80037fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003802:	e076      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003804:	2310      	movs	r3, #16
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800380a:	e072      	b.n	80038f2 <UART_SetConfig+0x2e6>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a35      	ldr	r2, [pc, #212]	@ (80038e8 <UART_SetConfig+0x2dc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d12a      	bne.n	800386c <UART_SetConfig+0x260>
 8003816:	4b30      	ldr	r3, [pc, #192]	@ (80038d8 <UART_SetConfig+0x2cc>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003820:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003824:	d01a      	beq.n	800385c <UART_SetConfig+0x250>
 8003826:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800382a:	d81b      	bhi.n	8003864 <UART_SetConfig+0x258>
 800382c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003830:	d00c      	beq.n	800384c <UART_SetConfig+0x240>
 8003832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003836:	d815      	bhi.n	8003864 <UART_SetConfig+0x258>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <UART_SetConfig+0x238>
 800383c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003840:	d008      	beq.n	8003854 <UART_SetConfig+0x248>
 8003842:	e00f      	b.n	8003864 <UART_SetConfig+0x258>
 8003844:	2300      	movs	r3, #0
 8003846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800384a:	e052      	b.n	80038f2 <UART_SetConfig+0x2e6>
 800384c:	2302      	movs	r3, #2
 800384e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003852:	e04e      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003854:	2304      	movs	r3, #4
 8003856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800385a:	e04a      	b.n	80038f2 <UART_SetConfig+0x2e6>
 800385c:	2308      	movs	r3, #8
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003862:	e046      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003864:	2310      	movs	r3, #16
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386a:	e042      	b.n	80038f2 <UART_SetConfig+0x2e6>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a17      	ldr	r2, [pc, #92]	@ (80038d0 <UART_SetConfig+0x2c4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d13a      	bne.n	80038ec <UART_SetConfig+0x2e0>
 8003876:	4b18      	ldr	r3, [pc, #96]	@ (80038d8 <UART_SetConfig+0x2cc>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003880:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003884:	d01a      	beq.n	80038bc <UART_SetConfig+0x2b0>
 8003886:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800388a:	d81b      	bhi.n	80038c4 <UART_SetConfig+0x2b8>
 800388c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003890:	d00c      	beq.n	80038ac <UART_SetConfig+0x2a0>
 8003892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003896:	d815      	bhi.n	80038c4 <UART_SetConfig+0x2b8>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <UART_SetConfig+0x298>
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a0:	d008      	beq.n	80038b4 <UART_SetConfig+0x2a8>
 80038a2:	e00f      	b.n	80038c4 <UART_SetConfig+0x2b8>
 80038a4:	2300      	movs	r3, #0
 80038a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038aa:	e022      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80038ac:	2302      	movs	r3, #2
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b2:	e01e      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80038b4:	2304      	movs	r3, #4
 80038b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ba:	e01a      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80038bc:	2308      	movs	r3, #8
 80038be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038c2:	e016      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80038c4:	2310      	movs	r3, #16
 80038c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ca:	e012      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80038cc:	efff69f3 	.word	0xefff69f3
 80038d0:	40008000 	.word	0x40008000
 80038d4:	40013800 	.word	0x40013800
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40004400 	.word	0x40004400
 80038e0:	40004800 	.word	0x40004800
 80038e4:	40004c00 	.word	0x40004c00
 80038e8:	40005000 	.word	0x40005000
 80038ec:	2310      	movs	r3, #16
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a9f      	ldr	r2, [pc, #636]	@ (8003b74 <UART_SetConfig+0x568>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d17a      	bne.n	80039f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003900:	2b08      	cmp	r3, #8
 8003902:	d824      	bhi.n	800394e <UART_SetConfig+0x342>
 8003904:	a201      	add	r2, pc, #4	@ (adr r2, 800390c <UART_SetConfig+0x300>)
 8003906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390a:	bf00      	nop
 800390c:	08003931 	.word	0x08003931
 8003910:	0800394f 	.word	0x0800394f
 8003914:	08003939 	.word	0x08003939
 8003918:	0800394f 	.word	0x0800394f
 800391c:	0800393f 	.word	0x0800393f
 8003920:	0800394f 	.word	0x0800394f
 8003924:	0800394f 	.word	0x0800394f
 8003928:	0800394f 	.word	0x0800394f
 800392c:	08003947 	.word	0x08003947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003930:	f7fe fd10 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 8003934:	61f8      	str	r0, [r7, #28]
        break;
 8003936:	e010      	b.n	800395a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003938:	4b8f      	ldr	r3, [pc, #572]	@ (8003b78 <UART_SetConfig+0x56c>)
 800393a:	61fb      	str	r3, [r7, #28]
        break;
 800393c:	e00d      	b.n	800395a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800393e:	f7fe fc71 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8003942:	61f8      	str	r0, [r7, #28]
        break;
 8003944:	e009      	b.n	800395a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800394a:	61fb      	str	r3, [r7, #28]
        break;
 800394c:	e005      	b.n	800395a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003958:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80fb 	beq.w	8003b58 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	429a      	cmp	r2, r3
 8003970:	d305      	bcc.n	800397e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	429a      	cmp	r2, r3
 800397c:	d903      	bls.n	8003986 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003984:	e0e8      	b.n	8003b58 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	2200      	movs	r2, #0
 800398a:	461c      	mov	r4, r3
 800398c:	4615      	mov	r5, r2
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	022b      	lsls	r3, r5, #8
 8003998:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800399c:	0222      	lsls	r2, r4, #8
 800399e:	68f9      	ldr	r1, [r7, #12]
 80039a0:	6849      	ldr	r1, [r1, #4]
 80039a2:	0849      	lsrs	r1, r1, #1
 80039a4:	2000      	movs	r0, #0
 80039a6:	4688      	mov	r8, r1
 80039a8:	4681      	mov	r9, r0
 80039aa:	eb12 0a08 	adds.w	sl, r2, r8
 80039ae:	eb43 0b09 	adc.w	fp, r3, r9
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039c0:	4650      	mov	r0, sl
 80039c2:	4659      	mov	r1, fp
 80039c4:	f7fc fc6c 	bl	80002a0 <__aeabi_uldivmod>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4613      	mov	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039d6:	d308      	bcc.n	80039ea <UART_SetConfig+0x3de>
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039de:	d204      	bcs.n	80039ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	60da      	str	r2, [r3, #12]
 80039e8:	e0b6      	b.n	8003b58 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039f0:	e0b2      	b.n	8003b58 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039fa:	d15e      	bne.n	8003aba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80039fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d828      	bhi.n	8003a56 <UART_SetConfig+0x44a>
 8003a04:	a201      	add	r2, pc, #4	@ (adr r2, 8003a0c <UART_SetConfig+0x400>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003a31 	.word	0x08003a31
 8003a10:	08003a39 	.word	0x08003a39
 8003a14:	08003a41 	.word	0x08003a41
 8003a18:	08003a57 	.word	0x08003a57
 8003a1c:	08003a47 	.word	0x08003a47
 8003a20:	08003a57 	.word	0x08003a57
 8003a24:	08003a57 	.word	0x08003a57
 8003a28:	08003a57 	.word	0x08003a57
 8003a2c:	08003a4f 	.word	0x08003a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a30:	f7fe fc90 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 8003a34:	61f8      	str	r0, [r7, #28]
        break;
 8003a36:	e014      	b.n	8003a62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a38:	f7fe fca2 	bl	8002380 <HAL_RCC_GetPCLK2Freq>
 8003a3c:	61f8      	str	r0, [r7, #28]
        break;
 8003a3e:	e010      	b.n	8003a62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a40:	4b4d      	ldr	r3, [pc, #308]	@ (8003b78 <UART_SetConfig+0x56c>)
 8003a42:	61fb      	str	r3, [r7, #28]
        break;
 8003a44:	e00d      	b.n	8003a62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a46:	f7fe fbed 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8003a4a:	61f8      	str	r0, [r7, #28]
        break;
 8003a4c:	e009      	b.n	8003a62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a52:	61fb      	str	r3, [r7, #28]
        break;
 8003a54:	e005      	b.n	8003a62 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d077      	beq.n	8003b58 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	005a      	lsls	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	441a      	add	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b0f      	cmp	r3, #15
 8003a82:	d916      	bls.n	8003ab2 <UART_SetConfig+0x4a6>
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a8a:	d212      	bcs.n	8003ab2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f023 030f 	bic.w	r3, r3, #15
 8003a94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	8afb      	ldrh	r3, [r7, #22]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	8afa      	ldrh	r2, [r7, #22]
 8003aae:	60da      	str	r2, [r3, #12]
 8003ab0:	e052      	b.n	8003b58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ab8:	e04e      	b.n	8003b58 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d827      	bhi.n	8003b12 <UART_SetConfig+0x506>
 8003ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac8 <UART_SetConfig+0x4bc>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003aed 	.word	0x08003aed
 8003acc:	08003af5 	.word	0x08003af5
 8003ad0:	08003afd 	.word	0x08003afd
 8003ad4:	08003b13 	.word	0x08003b13
 8003ad8:	08003b03 	.word	0x08003b03
 8003adc:	08003b13 	.word	0x08003b13
 8003ae0:	08003b13 	.word	0x08003b13
 8003ae4:	08003b13 	.word	0x08003b13
 8003ae8:	08003b0b 	.word	0x08003b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aec:	f7fe fc32 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 8003af0:	61f8      	str	r0, [r7, #28]
        break;
 8003af2:	e014      	b.n	8003b1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003af4:	f7fe fc44 	bl	8002380 <HAL_RCC_GetPCLK2Freq>
 8003af8:	61f8      	str	r0, [r7, #28]
        break;
 8003afa:	e010      	b.n	8003b1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003afc:	4b1e      	ldr	r3, [pc, #120]	@ (8003b78 <UART_SetConfig+0x56c>)
 8003afe:	61fb      	str	r3, [r7, #28]
        break;
 8003b00:	e00d      	b.n	8003b1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b02:	f7fe fb8f 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8003b06:	61f8      	str	r0, [r7, #28]
        break;
 8003b08:	e009      	b.n	8003b1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b0e:	61fb      	str	r3, [r7, #28]
        break;
 8003b10:	e005      	b.n	8003b1e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b1c:	bf00      	nop
    }

    if (pclk != 0U)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d019      	beq.n	8003b58 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	085a      	lsrs	r2, r3, #1
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	441a      	add	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b0f      	cmp	r3, #15
 8003b3c:	d909      	bls.n	8003b52 <UART_SetConfig+0x546>
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b44:	d205      	bcs.n	8003b52 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60da      	str	r2, [r3, #12]
 8003b50:	e002      	b.n	8003b58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3728      	adds	r7, #40	@ 0x28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b72:	bf00      	nop
 8003b74:	40008000 	.word	0x40008000
 8003b78:	00f42400 	.word	0x00f42400

08003b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01a      	beq.n	8003c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c7a:	d10a      	bne.n	8003c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b098      	sub	sp, #96	@ 0x60
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cd0:	f7fd f9f0 	bl	80010b4 <HAL_GetTick>
 8003cd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d12e      	bne.n	8003d42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cec:	2200      	movs	r2, #0
 8003cee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f88c 	bl	8003e10 <UART_WaitOnFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d021      	beq.n	8003d42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d06:	e853 3f00 	ldrex	r3, [r3]
 8003d0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d12:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e6      	bne.n	8003cfe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e062      	b.n	8003e08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d149      	bne.n	8003de4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f856 	bl	8003e10 <UART_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d03c      	beq.n	8003de4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	623b      	str	r3, [r7, #32]
   return(result);
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e6      	bne.n	8003d6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3308      	adds	r3, #8
 8003da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3308      	adds	r3, #8
 8003dba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dbc:	61fa      	str	r2, [r7, #28]
 8003dbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	69b9      	ldr	r1, [r7, #24]
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e5      	bne.n	8003d9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e011      	b.n	8003e08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3758      	adds	r7, #88	@ 0x58
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e20:	e04f      	b.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d04b      	beq.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7fd f943 	bl	80010b4 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e04e      	b.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d037      	beq.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b80      	cmp	r3, #128	@ 0x80
 8003e56:	d034      	beq.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b40      	cmp	r3, #64	@ 0x40
 8003e5c:	d031      	beq.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d110      	bne.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2208      	movs	r2, #8
 8003e72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f8ff 	bl	8004078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e029      	b.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e9c:	d111      	bne.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ea6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f8e5 	bl	8004078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e00f      	b.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69da      	ldr	r2, [r3, #28]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	bf0c      	ite	eq
 8003ed2:	2301      	moveq	r3, #1
 8003ed4:	2300      	movne	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d0a0      	beq.n	8003e22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b097      	sub	sp, #92	@ 0x5c
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	88fa      	ldrh	r2, [r7, #6]
 8003f04:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	88fa      	ldrh	r2, [r7, #6]
 8003f0c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f1e:	d10e      	bne.n	8003f3e <UART_Start_Receive_IT+0x52>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d105      	bne.n	8003f34 <UART_Start_Receive_IT+0x48>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003f2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f32:	e02d      	b.n	8003f90 <UART_Start_Receive_IT+0xa4>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	22ff      	movs	r2, #255	@ 0xff
 8003f38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f3c:	e028      	b.n	8003f90 <UART_Start_Receive_IT+0xa4>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10d      	bne.n	8003f62 <UART_Start_Receive_IT+0x76>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d104      	bne.n	8003f58 <UART_Start_Receive_IT+0x6c>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	22ff      	movs	r2, #255	@ 0xff
 8003f52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f56:	e01b      	b.n	8003f90 <UART_Start_Receive_IT+0xa4>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	227f      	movs	r2, #127	@ 0x7f
 8003f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f60:	e016      	b.n	8003f90 <UART_Start_Receive_IT+0xa4>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f6a:	d10d      	bne.n	8003f88 <UART_Start_Receive_IT+0x9c>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d104      	bne.n	8003f7e <UART_Start_Receive_IT+0x92>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	227f      	movs	r2, #127	@ 0x7f
 8003f78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f7c:	e008      	b.n	8003f90 <UART_Start_Receive_IT+0xa4>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	223f      	movs	r2, #63	@ 0x3f
 8003f82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f86:	e003      	b.n	8003f90 <UART_Start_Receive_IT+0xa4>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2222      	movs	r2, #34	@ 0x22
 8003f9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003fc0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003fc2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003fc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e5      	bne.n	8003fa0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fdc:	d107      	bne.n	8003fee <UART_Start_Receive_IT+0x102>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d103      	bne.n	8003fee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4a21      	ldr	r2, [pc, #132]	@ (8004070 <UART_Start_Receive_IT+0x184>)
 8003fea:	669a      	str	r2, [r3, #104]	@ 0x68
 8003fec:	e002      	b.n	8003ff4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4a20      	ldr	r2, [pc, #128]	@ (8004074 <UART_Start_Receive_IT+0x188>)
 8003ff2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d019      	beq.n	8004030 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004010:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800401a:	637b      	str	r3, [r7, #52]	@ 0x34
 800401c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004020:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e6      	bne.n	8003ffc <UART_Start_Receive_IT+0x110>
 800402e:	e018      	b.n	8004062 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	613b      	str	r3, [r7, #16]
   return(result);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f043 0320 	orr.w	r3, r3, #32
 8004044:	653b      	str	r3, [r7, #80]	@ 0x50
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800404e:	623b      	str	r3, [r7, #32]
 8004050:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	69f9      	ldr	r1, [r7, #28]
 8004054:	6a3a      	ldr	r2, [r7, #32]
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	61bb      	str	r3, [r7, #24]
   return(result);
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e6      	bne.n	8004030 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	375c      	adds	r7, #92	@ 0x5c
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	080044f5 	.word	0x080044f5
 8004074:	08004339 	.word	0x08004339

08004078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004078:	b480      	push	{r7}
 800407a:	b095      	sub	sp, #84	@ 0x54
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800408e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004094:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800409e:	643b      	str	r3, [r7, #64]	@ 0x40
 80040a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040a6:	e841 2300 	strex	r3, r2, [r1]
 80040aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1e6      	bne.n	8004080 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3308      	adds	r3, #8
 80040b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	e853 3f00 	ldrex	r3, [r3]
 80040c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f023 0301 	bic.w	r3, r3, #1
 80040c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3308      	adds	r3, #8
 80040d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e5      	bne.n	80040b2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d118      	bne.n	8004120 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f023 0310 	bic.w	r3, r3, #16
 8004102:	647b      	str	r3, [r7, #68]	@ 0x44
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6979      	ldr	r1, [r7, #20]
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	613b      	str	r3, [r7, #16]
   return(result);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e6      	bne.n	80040ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004134:	bf00      	nop
 8004136:	3754      	adds	r7, #84	@ 0x54
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f7ff fa3e 	bl	80035e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800416c:	b480      	push	{r7}
 800416e:	b08f      	sub	sp, #60	@ 0x3c
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004178:	2b21      	cmp	r3, #33	@ 0x21
 800417a:	d14c      	bne.n	8004216 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d132      	bne.n	80041ee <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	61fb      	str	r3, [r7, #28]
   return(result);
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800419c:	637b      	str	r3, [r7, #52]	@ 0x34
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041a8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e6      	bne.n	8004188 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6979      	ldr	r1, [r7, #20]
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	613b      	str	r3, [r7, #16]
   return(result);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e6      	bne.n	80041ba <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80041ec:	e013      	b.n	8004216 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f2:	781a      	ldrb	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004216:	bf00      	nop
 8004218:	373c      	adds	r7, #60	@ 0x3c
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004222:	b480      	push	{r7}
 8004224:	b091      	sub	sp, #68	@ 0x44
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800422e:	2b21      	cmp	r3, #33	@ 0x21
 8004230:	d151      	bne.n	80042d6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d132      	bne.n	80042a4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	623b      	str	r3, [r7, #32]
   return(result);
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004252:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425c:	633b      	str	r3, [r7, #48]	@ 0x30
 800425e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800426a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e6      	bne.n	800423e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	60fb      	str	r3, [r7, #12]
   return(result);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004284:	637b      	str	r3, [r7, #52]	@ 0x34
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	69b9      	ldr	r1, [r7, #24]
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	617b      	str	r3, [r7, #20]
   return(result);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e6      	bne.n	8004270 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80042a2:	e018      	b.n	80042d6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80042aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ac:	881a      	ldrh	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042b6:	b292      	uxth	r2, r2
 80042b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042be:	1c9a      	adds	r2, r3, #2
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80042d6:	bf00      	nop
 80042d8:	3744      	adds	r7, #68	@ 0x44
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b088      	sub	sp, #32
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042fe:	61fb      	str	r3, [r7, #28]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	6979      	ldr	r1, [r7, #20]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	613b      	str	r3, [r7, #16]
   return(result);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e6      	bne.n	80042ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7fc fd1f 	bl	8000d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800432e:	bf00      	nop
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b09c      	sub	sp, #112	@ 0x70
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004346:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004350:	2b22      	cmp	r3, #34	@ 0x22
 8004352:	f040 80be 	bne.w	80044d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800435c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004360:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004364:	b2d9      	uxtb	r1, r3
 8004366:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800436a:	b2da      	uxtb	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004370:	400a      	ands	r2, r1
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 80a3 	bne.w	80044e6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e6      	bne.n	80043a0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3308      	adds	r3, #8
 80043d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3308      	adds	r3, #8
 80043f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80043f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80043f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e5      	bne.n	80043d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a34      	ldr	r2, [pc, #208]	@ (80044f0 <UART_RxISR_8BIT+0x1b8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d01f      	beq.n	8004464 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d018      	beq.n	8004464 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	623b      	str	r3, [r7, #32]
   return(result);
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004446:	663b      	str	r3, [r7, #96]	@ 0x60
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	461a      	mov	r2, r3
 800444e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004450:	633b      	str	r3, [r7, #48]	@ 0x30
 8004452:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800445e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e6      	bne.n	8004432 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004468:	2b01      	cmp	r3, #1
 800446a:	d12e      	bne.n	80044ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0310 	bic.w	r3, r3, #16
 8004486:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	69b9      	ldr	r1, [r7, #24]
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	617b      	str	r3, [r7, #20]
   return(result);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e6      	bne.n	8004472 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	2b10      	cmp	r3, #16
 80044b0:	d103      	bne.n	80044ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2210      	movs	r2, #16
 80044b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044c0:	4619      	mov	r1, r3
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff f896 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044c8:	e00d      	b.n	80044e6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fc fc80 	bl	8000dd0 <HAL_UART_RxCpltCallback>
}
 80044d0:	e009      	b.n	80044e6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	8b1b      	ldrh	r3, [r3, #24]
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0208 	orr.w	r2, r2, #8
 80044e2:	b292      	uxth	r2, r2
 80044e4:	831a      	strh	r2, [r3, #24]
}
 80044e6:	bf00      	nop
 80044e8:	3770      	adds	r7, #112	@ 0x70
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40008000 	.word	0x40008000

080044f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b09c      	sub	sp, #112	@ 0x70
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004502:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800450c:	2b22      	cmp	r3, #34	@ 0x22
 800450e:	f040 80be 	bne.w	800468e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004518:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004520:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004522:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004526:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800452a:	4013      	ands	r3, r2
 800452c:	b29a      	uxth	r2, r3
 800452e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004530:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004536:	1c9a      	adds	r2, r3, #2
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004542:	b29b      	uxth	r3, r3
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	f040 80a3 	bne.w	80046a2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800456a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800456c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004570:	667b      	str	r3, [r7, #100]	@ 0x64
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800457a:	657b      	str	r3, [r7, #84]	@ 0x54
 800457c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004580:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e6      	bne.n	800455c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3308      	adds	r3, #8
 8004594:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800459e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3308      	adds	r3, #8
 80045ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80045ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80045b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e5      	bne.n	800458e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a34      	ldr	r2, [pc, #208]	@ (80046ac <UART_RxISR_16BIT+0x1b8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d01f      	beq.n	8004620 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d018      	beq.n	8004620 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004602:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800460c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800460e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004610:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004614:	e841 2300 	strex	r3, r2, [r1]
 8004618:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e6      	bne.n	80045ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004624:	2b01      	cmp	r3, #1
 8004626:	d12e      	bne.n	8004686 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	e853 3f00 	ldrex	r3, [r3]
 800463a:	60bb      	str	r3, [r7, #8]
   return(result);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f023 0310 	bic.w	r3, r3, #16
 8004642:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004650:	6979      	ldr	r1, [r7, #20]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	613b      	str	r3, [r7, #16]
   return(result);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e6      	bne.n	800462e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b10      	cmp	r3, #16
 800466c:	d103      	bne.n	8004676 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2210      	movs	r2, #16
 8004674:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800467c:	4619      	mov	r1, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fe ffb8 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004684:	e00d      	b.n	80046a2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fc fba2 	bl	8000dd0 <HAL_UART_RxCpltCallback>
}
 800468c:	e009      	b.n	80046a2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	8b1b      	ldrh	r3, [r3, #24]
 8004694:	b29a      	uxth	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0208 	orr.w	r2, r2, #8
 800469e:	b292      	uxth	r2, r2
 80046a0:	831a      	strh	r2, [r3, #24]
}
 80046a2:	bf00      	nop
 80046a4:	3770      	adds	r7, #112	@ 0x70
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40008000 	.word	0x40008000

080046b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <atoi>:
 80046c4:	220a      	movs	r2, #10
 80046c6:	2100      	movs	r1, #0
 80046c8:	f000 b87a 	b.w	80047c0 <strtol>

080046cc <_strtol_l.constprop.0>:
 80046cc:	2b24      	cmp	r3, #36	@ 0x24
 80046ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d2:	4686      	mov	lr, r0
 80046d4:	4690      	mov	r8, r2
 80046d6:	d801      	bhi.n	80046dc <_strtol_l.constprop.0+0x10>
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d106      	bne.n	80046ea <_strtol_l.constprop.0+0x1e>
 80046dc:	f000 f8a2 	bl	8004824 <__errno>
 80046e0:	2316      	movs	r3, #22
 80046e2:	6003      	str	r3, [r0, #0]
 80046e4:	2000      	movs	r0, #0
 80046e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ea:	4834      	ldr	r0, [pc, #208]	@ (80047bc <_strtol_l.constprop.0+0xf0>)
 80046ec:	460d      	mov	r5, r1
 80046ee:	462a      	mov	r2, r5
 80046f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046f4:	5d06      	ldrb	r6, [r0, r4]
 80046f6:	f016 0608 	ands.w	r6, r6, #8
 80046fa:	d1f8      	bne.n	80046ee <_strtol_l.constprop.0+0x22>
 80046fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80046fe:	d12d      	bne.n	800475c <_strtol_l.constprop.0+0x90>
 8004700:	782c      	ldrb	r4, [r5, #0]
 8004702:	2601      	movs	r6, #1
 8004704:	1c95      	adds	r5, r2, #2
 8004706:	f033 0210 	bics.w	r2, r3, #16
 800470a:	d109      	bne.n	8004720 <_strtol_l.constprop.0+0x54>
 800470c:	2c30      	cmp	r4, #48	@ 0x30
 800470e:	d12a      	bne.n	8004766 <_strtol_l.constprop.0+0x9a>
 8004710:	782a      	ldrb	r2, [r5, #0]
 8004712:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004716:	2a58      	cmp	r2, #88	@ 0x58
 8004718:	d125      	bne.n	8004766 <_strtol_l.constprop.0+0x9a>
 800471a:	786c      	ldrb	r4, [r5, #1]
 800471c:	2310      	movs	r3, #16
 800471e:	3502      	adds	r5, #2
 8004720:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004724:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004728:	2200      	movs	r2, #0
 800472a:	fbbc f9f3 	udiv	r9, ip, r3
 800472e:	4610      	mov	r0, r2
 8004730:	fb03 ca19 	mls	sl, r3, r9, ip
 8004734:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004738:	2f09      	cmp	r7, #9
 800473a:	d81b      	bhi.n	8004774 <_strtol_l.constprop.0+0xa8>
 800473c:	463c      	mov	r4, r7
 800473e:	42a3      	cmp	r3, r4
 8004740:	dd27      	ble.n	8004792 <_strtol_l.constprop.0+0xc6>
 8004742:	1c57      	adds	r7, r2, #1
 8004744:	d007      	beq.n	8004756 <_strtol_l.constprop.0+0x8a>
 8004746:	4581      	cmp	r9, r0
 8004748:	d320      	bcc.n	800478c <_strtol_l.constprop.0+0xc0>
 800474a:	d101      	bne.n	8004750 <_strtol_l.constprop.0+0x84>
 800474c:	45a2      	cmp	sl, r4
 800474e:	db1d      	blt.n	800478c <_strtol_l.constprop.0+0xc0>
 8004750:	fb00 4003 	mla	r0, r0, r3, r4
 8004754:	2201      	movs	r2, #1
 8004756:	f815 4b01 	ldrb.w	r4, [r5], #1
 800475a:	e7eb      	b.n	8004734 <_strtol_l.constprop.0+0x68>
 800475c:	2c2b      	cmp	r4, #43	@ 0x2b
 800475e:	bf04      	itt	eq
 8004760:	782c      	ldrbeq	r4, [r5, #0]
 8004762:	1c95      	addeq	r5, r2, #2
 8004764:	e7cf      	b.n	8004706 <_strtol_l.constprop.0+0x3a>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1da      	bne.n	8004720 <_strtol_l.constprop.0+0x54>
 800476a:	2c30      	cmp	r4, #48	@ 0x30
 800476c:	bf0c      	ite	eq
 800476e:	2308      	moveq	r3, #8
 8004770:	230a      	movne	r3, #10
 8004772:	e7d5      	b.n	8004720 <_strtol_l.constprop.0+0x54>
 8004774:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004778:	2f19      	cmp	r7, #25
 800477a:	d801      	bhi.n	8004780 <_strtol_l.constprop.0+0xb4>
 800477c:	3c37      	subs	r4, #55	@ 0x37
 800477e:	e7de      	b.n	800473e <_strtol_l.constprop.0+0x72>
 8004780:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004784:	2f19      	cmp	r7, #25
 8004786:	d804      	bhi.n	8004792 <_strtol_l.constprop.0+0xc6>
 8004788:	3c57      	subs	r4, #87	@ 0x57
 800478a:	e7d8      	b.n	800473e <_strtol_l.constprop.0+0x72>
 800478c:	f04f 32ff 	mov.w	r2, #4294967295
 8004790:	e7e1      	b.n	8004756 <_strtol_l.constprop.0+0x8a>
 8004792:	1c53      	adds	r3, r2, #1
 8004794:	d108      	bne.n	80047a8 <_strtol_l.constprop.0+0xdc>
 8004796:	2322      	movs	r3, #34	@ 0x22
 8004798:	f8ce 3000 	str.w	r3, [lr]
 800479c:	4660      	mov	r0, ip
 800479e:	f1b8 0f00 	cmp.w	r8, #0
 80047a2:	d0a0      	beq.n	80046e6 <_strtol_l.constprop.0+0x1a>
 80047a4:	1e69      	subs	r1, r5, #1
 80047a6:	e006      	b.n	80047b6 <_strtol_l.constprop.0+0xea>
 80047a8:	b106      	cbz	r6, 80047ac <_strtol_l.constprop.0+0xe0>
 80047aa:	4240      	negs	r0, r0
 80047ac:	f1b8 0f00 	cmp.w	r8, #0
 80047b0:	d099      	beq.n	80046e6 <_strtol_l.constprop.0+0x1a>
 80047b2:	2a00      	cmp	r2, #0
 80047b4:	d1f6      	bne.n	80047a4 <_strtol_l.constprop.0+0xd8>
 80047b6:	f8c8 1000 	str.w	r1, [r8]
 80047ba:	e794      	b.n	80046e6 <_strtol_l.constprop.0+0x1a>
 80047bc:	080051d1 	.word	0x080051d1

080047c0 <strtol>:
 80047c0:	4613      	mov	r3, r2
 80047c2:	460a      	mov	r2, r1
 80047c4:	4601      	mov	r1, r0
 80047c6:	4802      	ldr	r0, [pc, #8]	@ (80047d0 <strtol+0x10>)
 80047c8:	6800      	ldr	r0, [r0, #0]
 80047ca:	f7ff bf7f 	b.w	80046cc <_strtol_l.constprop.0>
 80047ce:	bf00      	nop
 80047d0:	2000000c 	.word	0x2000000c

080047d4 <_vsiprintf_r>:
 80047d4:	b500      	push	{lr}
 80047d6:	b09b      	sub	sp, #108	@ 0x6c
 80047d8:	9100      	str	r1, [sp, #0]
 80047da:	9104      	str	r1, [sp, #16]
 80047dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80047e0:	9105      	str	r1, [sp, #20]
 80047e2:	9102      	str	r1, [sp, #8]
 80047e4:	4905      	ldr	r1, [pc, #20]	@ (80047fc <_vsiprintf_r+0x28>)
 80047e6:	9103      	str	r1, [sp, #12]
 80047e8:	4669      	mov	r1, sp
 80047ea:	f000 f99b 	bl	8004b24 <_svfiprintf_r>
 80047ee:	9b00      	ldr	r3, [sp, #0]
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	b01b      	add	sp, #108	@ 0x6c
 80047f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80047fa:	bf00      	nop
 80047fc:	ffff0208 	.word	0xffff0208

08004800 <vsiprintf>:
 8004800:	4613      	mov	r3, r2
 8004802:	460a      	mov	r2, r1
 8004804:	4601      	mov	r1, r0
 8004806:	4802      	ldr	r0, [pc, #8]	@ (8004810 <vsiprintf+0x10>)
 8004808:	6800      	ldr	r0, [r0, #0]
 800480a:	f7ff bfe3 	b.w	80047d4 <_vsiprintf_r>
 800480e:	bf00      	nop
 8004810:	2000000c 	.word	0x2000000c

08004814 <memset>:
 8004814:	4402      	add	r2, r0
 8004816:	4603      	mov	r3, r0
 8004818:	4293      	cmp	r3, r2
 800481a:	d100      	bne.n	800481e <memset+0xa>
 800481c:	4770      	bx	lr
 800481e:	f803 1b01 	strb.w	r1, [r3], #1
 8004822:	e7f9      	b.n	8004818 <memset+0x4>

08004824 <__errno>:
 8004824:	4b01      	ldr	r3, [pc, #4]	@ (800482c <__errno+0x8>)
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	2000000c 	.word	0x2000000c

08004830 <__libc_init_array>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	4d0d      	ldr	r5, [pc, #52]	@ (8004868 <__libc_init_array+0x38>)
 8004834:	4c0d      	ldr	r4, [pc, #52]	@ (800486c <__libc_init_array+0x3c>)
 8004836:	1b64      	subs	r4, r4, r5
 8004838:	10a4      	asrs	r4, r4, #2
 800483a:	2600      	movs	r6, #0
 800483c:	42a6      	cmp	r6, r4
 800483e:	d109      	bne.n	8004854 <__libc_init_array+0x24>
 8004840:	4d0b      	ldr	r5, [pc, #44]	@ (8004870 <__libc_init_array+0x40>)
 8004842:	4c0c      	ldr	r4, [pc, #48]	@ (8004874 <__libc_init_array+0x44>)
 8004844:	f000 fc66 	bl	8005114 <_init>
 8004848:	1b64      	subs	r4, r4, r5
 800484a:	10a4      	asrs	r4, r4, #2
 800484c:	2600      	movs	r6, #0
 800484e:	42a6      	cmp	r6, r4
 8004850:	d105      	bne.n	800485e <__libc_init_array+0x2e>
 8004852:	bd70      	pop	{r4, r5, r6, pc}
 8004854:	f855 3b04 	ldr.w	r3, [r5], #4
 8004858:	4798      	blx	r3
 800485a:	3601      	adds	r6, #1
 800485c:	e7ee      	b.n	800483c <__libc_init_array+0xc>
 800485e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004862:	4798      	blx	r3
 8004864:	3601      	adds	r6, #1
 8004866:	e7f2      	b.n	800484e <__libc_init_array+0x1e>
 8004868:	0800530c 	.word	0x0800530c
 800486c:	0800530c 	.word	0x0800530c
 8004870:	0800530c 	.word	0x0800530c
 8004874:	08005310 	.word	0x08005310

08004878 <__retarget_lock_acquire_recursive>:
 8004878:	4770      	bx	lr

0800487a <__retarget_lock_release_recursive>:
 800487a:	4770      	bx	lr

0800487c <_free_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4605      	mov	r5, r0
 8004880:	2900      	cmp	r1, #0
 8004882:	d041      	beq.n	8004908 <_free_r+0x8c>
 8004884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004888:	1f0c      	subs	r4, r1, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	bfb8      	it	lt
 800488e:	18e4      	addlt	r4, r4, r3
 8004890:	f000 f8e0 	bl	8004a54 <__malloc_lock>
 8004894:	4a1d      	ldr	r2, [pc, #116]	@ (800490c <_free_r+0x90>)
 8004896:	6813      	ldr	r3, [r2, #0]
 8004898:	b933      	cbnz	r3, 80048a8 <_free_r+0x2c>
 800489a:	6063      	str	r3, [r4, #4]
 800489c:	6014      	str	r4, [r2, #0]
 800489e:	4628      	mov	r0, r5
 80048a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048a4:	f000 b8dc 	b.w	8004a60 <__malloc_unlock>
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	d908      	bls.n	80048be <_free_r+0x42>
 80048ac:	6820      	ldr	r0, [r4, #0]
 80048ae:	1821      	adds	r1, r4, r0
 80048b0:	428b      	cmp	r3, r1
 80048b2:	bf01      	itttt	eq
 80048b4:	6819      	ldreq	r1, [r3, #0]
 80048b6:	685b      	ldreq	r3, [r3, #4]
 80048b8:	1809      	addeq	r1, r1, r0
 80048ba:	6021      	streq	r1, [r4, #0]
 80048bc:	e7ed      	b.n	800489a <_free_r+0x1e>
 80048be:	461a      	mov	r2, r3
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	b10b      	cbz	r3, 80048c8 <_free_r+0x4c>
 80048c4:	42a3      	cmp	r3, r4
 80048c6:	d9fa      	bls.n	80048be <_free_r+0x42>
 80048c8:	6811      	ldr	r1, [r2, #0]
 80048ca:	1850      	adds	r0, r2, r1
 80048cc:	42a0      	cmp	r0, r4
 80048ce:	d10b      	bne.n	80048e8 <_free_r+0x6c>
 80048d0:	6820      	ldr	r0, [r4, #0]
 80048d2:	4401      	add	r1, r0
 80048d4:	1850      	adds	r0, r2, r1
 80048d6:	4283      	cmp	r3, r0
 80048d8:	6011      	str	r1, [r2, #0]
 80048da:	d1e0      	bne.n	800489e <_free_r+0x22>
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	6053      	str	r3, [r2, #4]
 80048e2:	4408      	add	r0, r1
 80048e4:	6010      	str	r0, [r2, #0]
 80048e6:	e7da      	b.n	800489e <_free_r+0x22>
 80048e8:	d902      	bls.n	80048f0 <_free_r+0x74>
 80048ea:	230c      	movs	r3, #12
 80048ec:	602b      	str	r3, [r5, #0]
 80048ee:	e7d6      	b.n	800489e <_free_r+0x22>
 80048f0:	6820      	ldr	r0, [r4, #0]
 80048f2:	1821      	adds	r1, r4, r0
 80048f4:	428b      	cmp	r3, r1
 80048f6:	bf04      	itt	eq
 80048f8:	6819      	ldreq	r1, [r3, #0]
 80048fa:	685b      	ldreq	r3, [r3, #4]
 80048fc:	6063      	str	r3, [r4, #4]
 80048fe:	bf04      	itt	eq
 8004900:	1809      	addeq	r1, r1, r0
 8004902:	6021      	streq	r1, [r4, #0]
 8004904:	6054      	str	r4, [r2, #4]
 8004906:	e7ca      	b.n	800489e <_free_r+0x22>
 8004908:	bd38      	pop	{r3, r4, r5, pc}
 800490a:	bf00      	nop
 800490c:	20000700 	.word	0x20000700

08004910 <sbrk_aligned>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4e0f      	ldr	r6, [pc, #60]	@ (8004950 <sbrk_aligned+0x40>)
 8004914:	460c      	mov	r4, r1
 8004916:	6831      	ldr	r1, [r6, #0]
 8004918:	4605      	mov	r5, r0
 800491a:	b911      	cbnz	r1, 8004922 <sbrk_aligned+0x12>
 800491c:	f000 fba6 	bl	800506c <_sbrk_r>
 8004920:	6030      	str	r0, [r6, #0]
 8004922:	4621      	mov	r1, r4
 8004924:	4628      	mov	r0, r5
 8004926:	f000 fba1 	bl	800506c <_sbrk_r>
 800492a:	1c43      	adds	r3, r0, #1
 800492c:	d103      	bne.n	8004936 <sbrk_aligned+0x26>
 800492e:	f04f 34ff 	mov.w	r4, #4294967295
 8004932:	4620      	mov	r0, r4
 8004934:	bd70      	pop	{r4, r5, r6, pc}
 8004936:	1cc4      	adds	r4, r0, #3
 8004938:	f024 0403 	bic.w	r4, r4, #3
 800493c:	42a0      	cmp	r0, r4
 800493e:	d0f8      	beq.n	8004932 <sbrk_aligned+0x22>
 8004940:	1a21      	subs	r1, r4, r0
 8004942:	4628      	mov	r0, r5
 8004944:	f000 fb92 	bl	800506c <_sbrk_r>
 8004948:	3001      	adds	r0, #1
 800494a:	d1f2      	bne.n	8004932 <sbrk_aligned+0x22>
 800494c:	e7ef      	b.n	800492e <sbrk_aligned+0x1e>
 800494e:	bf00      	nop
 8004950:	200006fc 	.word	0x200006fc

08004954 <_malloc_r>:
 8004954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004958:	1ccd      	adds	r5, r1, #3
 800495a:	f025 0503 	bic.w	r5, r5, #3
 800495e:	3508      	adds	r5, #8
 8004960:	2d0c      	cmp	r5, #12
 8004962:	bf38      	it	cc
 8004964:	250c      	movcc	r5, #12
 8004966:	2d00      	cmp	r5, #0
 8004968:	4606      	mov	r6, r0
 800496a:	db01      	blt.n	8004970 <_malloc_r+0x1c>
 800496c:	42a9      	cmp	r1, r5
 800496e:	d904      	bls.n	800497a <_malloc_r+0x26>
 8004970:	230c      	movs	r3, #12
 8004972:	6033      	str	r3, [r6, #0]
 8004974:	2000      	movs	r0, #0
 8004976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800497a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a50 <_malloc_r+0xfc>
 800497e:	f000 f869 	bl	8004a54 <__malloc_lock>
 8004982:	f8d8 3000 	ldr.w	r3, [r8]
 8004986:	461c      	mov	r4, r3
 8004988:	bb44      	cbnz	r4, 80049dc <_malloc_r+0x88>
 800498a:	4629      	mov	r1, r5
 800498c:	4630      	mov	r0, r6
 800498e:	f7ff ffbf 	bl	8004910 <sbrk_aligned>
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	4604      	mov	r4, r0
 8004996:	d158      	bne.n	8004a4a <_malloc_r+0xf6>
 8004998:	f8d8 4000 	ldr.w	r4, [r8]
 800499c:	4627      	mov	r7, r4
 800499e:	2f00      	cmp	r7, #0
 80049a0:	d143      	bne.n	8004a2a <_malloc_r+0xd6>
 80049a2:	2c00      	cmp	r4, #0
 80049a4:	d04b      	beq.n	8004a3e <_malloc_r+0xea>
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	4639      	mov	r1, r7
 80049aa:	4630      	mov	r0, r6
 80049ac:	eb04 0903 	add.w	r9, r4, r3
 80049b0:	f000 fb5c 	bl	800506c <_sbrk_r>
 80049b4:	4581      	cmp	r9, r0
 80049b6:	d142      	bne.n	8004a3e <_malloc_r+0xea>
 80049b8:	6821      	ldr	r1, [r4, #0]
 80049ba:	1a6d      	subs	r5, r5, r1
 80049bc:	4629      	mov	r1, r5
 80049be:	4630      	mov	r0, r6
 80049c0:	f7ff ffa6 	bl	8004910 <sbrk_aligned>
 80049c4:	3001      	adds	r0, #1
 80049c6:	d03a      	beq.n	8004a3e <_malloc_r+0xea>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	442b      	add	r3, r5
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	f8d8 3000 	ldr.w	r3, [r8]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	bb62      	cbnz	r2, 8004a30 <_malloc_r+0xdc>
 80049d6:	f8c8 7000 	str.w	r7, [r8]
 80049da:	e00f      	b.n	80049fc <_malloc_r+0xa8>
 80049dc:	6822      	ldr	r2, [r4, #0]
 80049de:	1b52      	subs	r2, r2, r5
 80049e0:	d420      	bmi.n	8004a24 <_malloc_r+0xd0>
 80049e2:	2a0b      	cmp	r2, #11
 80049e4:	d917      	bls.n	8004a16 <_malloc_r+0xc2>
 80049e6:	1961      	adds	r1, r4, r5
 80049e8:	42a3      	cmp	r3, r4
 80049ea:	6025      	str	r5, [r4, #0]
 80049ec:	bf18      	it	ne
 80049ee:	6059      	strne	r1, [r3, #4]
 80049f0:	6863      	ldr	r3, [r4, #4]
 80049f2:	bf08      	it	eq
 80049f4:	f8c8 1000 	streq.w	r1, [r8]
 80049f8:	5162      	str	r2, [r4, r5]
 80049fa:	604b      	str	r3, [r1, #4]
 80049fc:	4630      	mov	r0, r6
 80049fe:	f000 f82f 	bl	8004a60 <__malloc_unlock>
 8004a02:	f104 000b 	add.w	r0, r4, #11
 8004a06:	1d23      	adds	r3, r4, #4
 8004a08:	f020 0007 	bic.w	r0, r0, #7
 8004a0c:	1ac2      	subs	r2, r0, r3
 8004a0e:	bf1c      	itt	ne
 8004a10:	1a1b      	subne	r3, r3, r0
 8004a12:	50a3      	strne	r3, [r4, r2]
 8004a14:	e7af      	b.n	8004976 <_malloc_r+0x22>
 8004a16:	6862      	ldr	r2, [r4, #4]
 8004a18:	42a3      	cmp	r3, r4
 8004a1a:	bf0c      	ite	eq
 8004a1c:	f8c8 2000 	streq.w	r2, [r8]
 8004a20:	605a      	strne	r2, [r3, #4]
 8004a22:	e7eb      	b.n	80049fc <_malloc_r+0xa8>
 8004a24:	4623      	mov	r3, r4
 8004a26:	6864      	ldr	r4, [r4, #4]
 8004a28:	e7ae      	b.n	8004988 <_malloc_r+0x34>
 8004a2a:	463c      	mov	r4, r7
 8004a2c:	687f      	ldr	r7, [r7, #4]
 8004a2e:	e7b6      	b.n	800499e <_malloc_r+0x4a>
 8004a30:	461a      	mov	r2, r3
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	d1fb      	bne.n	8004a30 <_malloc_r+0xdc>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6053      	str	r3, [r2, #4]
 8004a3c:	e7de      	b.n	80049fc <_malloc_r+0xa8>
 8004a3e:	230c      	movs	r3, #12
 8004a40:	6033      	str	r3, [r6, #0]
 8004a42:	4630      	mov	r0, r6
 8004a44:	f000 f80c 	bl	8004a60 <__malloc_unlock>
 8004a48:	e794      	b.n	8004974 <_malloc_r+0x20>
 8004a4a:	6005      	str	r5, [r0, #0]
 8004a4c:	e7d6      	b.n	80049fc <_malloc_r+0xa8>
 8004a4e:	bf00      	nop
 8004a50:	20000700 	.word	0x20000700

08004a54 <__malloc_lock>:
 8004a54:	4801      	ldr	r0, [pc, #4]	@ (8004a5c <__malloc_lock+0x8>)
 8004a56:	f7ff bf0f 	b.w	8004878 <__retarget_lock_acquire_recursive>
 8004a5a:	bf00      	nop
 8004a5c:	200006f8 	.word	0x200006f8

08004a60 <__malloc_unlock>:
 8004a60:	4801      	ldr	r0, [pc, #4]	@ (8004a68 <__malloc_unlock+0x8>)
 8004a62:	f7ff bf0a 	b.w	800487a <__retarget_lock_release_recursive>
 8004a66:	bf00      	nop
 8004a68:	200006f8 	.word	0x200006f8

08004a6c <__ssputs_r>:
 8004a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a70:	688e      	ldr	r6, [r1, #8]
 8004a72:	461f      	mov	r7, r3
 8004a74:	42be      	cmp	r6, r7
 8004a76:	680b      	ldr	r3, [r1, #0]
 8004a78:	4682      	mov	sl, r0
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	4690      	mov	r8, r2
 8004a7e:	d82d      	bhi.n	8004adc <__ssputs_r+0x70>
 8004a80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004a88:	d026      	beq.n	8004ad8 <__ssputs_r+0x6c>
 8004a8a:	6965      	ldr	r5, [r4, #20]
 8004a8c:	6909      	ldr	r1, [r1, #16]
 8004a8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a92:	eba3 0901 	sub.w	r9, r3, r1
 8004a96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a9a:	1c7b      	adds	r3, r7, #1
 8004a9c:	444b      	add	r3, r9
 8004a9e:	106d      	asrs	r5, r5, #1
 8004aa0:	429d      	cmp	r5, r3
 8004aa2:	bf38      	it	cc
 8004aa4:	461d      	movcc	r5, r3
 8004aa6:	0553      	lsls	r3, r2, #21
 8004aa8:	d527      	bpl.n	8004afa <__ssputs_r+0x8e>
 8004aaa:	4629      	mov	r1, r5
 8004aac:	f7ff ff52 	bl	8004954 <_malloc_r>
 8004ab0:	4606      	mov	r6, r0
 8004ab2:	b360      	cbz	r0, 8004b0e <__ssputs_r+0xa2>
 8004ab4:	6921      	ldr	r1, [r4, #16]
 8004ab6:	464a      	mov	r2, r9
 8004ab8:	f000 fae8 	bl	800508c <memcpy>
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac6:	81a3      	strh	r3, [r4, #12]
 8004ac8:	6126      	str	r6, [r4, #16]
 8004aca:	6165      	str	r5, [r4, #20]
 8004acc:	444e      	add	r6, r9
 8004ace:	eba5 0509 	sub.w	r5, r5, r9
 8004ad2:	6026      	str	r6, [r4, #0]
 8004ad4:	60a5      	str	r5, [r4, #8]
 8004ad6:	463e      	mov	r6, r7
 8004ad8:	42be      	cmp	r6, r7
 8004ada:	d900      	bls.n	8004ade <__ssputs_r+0x72>
 8004adc:	463e      	mov	r6, r7
 8004ade:	6820      	ldr	r0, [r4, #0]
 8004ae0:	4632      	mov	r2, r6
 8004ae2:	4641      	mov	r1, r8
 8004ae4:	f000 faa8 	bl	8005038 <memmove>
 8004ae8:	68a3      	ldr	r3, [r4, #8]
 8004aea:	1b9b      	subs	r3, r3, r6
 8004aec:	60a3      	str	r3, [r4, #8]
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	4433      	add	r3, r6
 8004af2:	6023      	str	r3, [r4, #0]
 8004af4:	2000      	movs	r0, #0
 8004af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afa:	462a      	mov	r2, r5
 8004afc:	f000 fad4 	bl	80050a8 <_realloc_r>
 8004b00:	4606      	mov	r6, r0
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d1e0      	bne.n	8004ac8 <__ssputs_r+0x5c>
 8004b06:	6921      	ldr	r1, [r4, #16]
 8004b08:	4650      	mov	r0, sl
 8004b0a:	f7ff feb7 	bl	800487c <_free_r>
 8004b0e:	230c      	movs	r3, #12
 8004b10:	f8ca 3000 	str.w	r3, [sl]
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	e7e9      	b.n	8004af6 <__ssputs_r+0x8a>
	...

08004b24 <_svfiprintf_r>:
 8004b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b28:	4698      	mov	r8, r3
 8004b2a:	898b      	ldrh	r3, [r1, #12]
 8004b2c:	061b      	lsls	r3, r3, #24
 8004b2e:	b09d      	sub	sp, #116	@ 0x74
 8004b30:	4607      	mov	r7, r0
 8004b32:	460d      	mov	r5, r1
 8004b34:	4614      	mov	r4, r2
 8004b36:	d510      	bpl.n	8004b5a <_svfiprintf_r+0x36>
 8004b38:	690b      	ldr	r3, [r1, #16]
 8004b3a:	b973      	cbnz	r3, 8004b5a <_svfiprintf_r+0x36>
 8004b3c:	2140      	movs	r1, #64	@ 0x40
 8004b3e:	f7ff ff09 	bl	8004954 <_malloc_r>
 8004b42:	6028      	str	r0, [r5, #0]
 8004b44:	6128      	str	r0, [r5, #16]
 8004b46:	b930      	cbnz	r0, 8004b56 <_svfiprintf_r+0x32>
 8004b48:	230c      	movs	r3, #12
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	b01d      	add	sp, #116	@ 0x74
 8004b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b56:	2340      	movs	r3, #64	@ 0x40
 8004b58:	616b      	str	r3, [r5, #20]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b5e:	2320      	movs	r3, #32
 8004b60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b68:	2330      	movs	r3, #48	@ 0x30
 8004b6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d08 <_svfiprintf_r+0x1e4>
 8004b6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b72:	f04f 0901 	mov.w	r9, #1
 8004b76:	4623      	mov	r3, r4
 8004b78:	469a      	mov	sl, r3
 8004b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b7e:	b10a      	cbz	r2, 8004b84 <_svfiprintf_r+0x60>
 8004b80:	2a25      	cmp	r2, #37	@ 0x25
 8004b82:	d1f9      	bne.n	8004b78 <_svfiprintf_r+0x54>
 8004b84:	ebba 0b04 	subs.w	fp, sl, r4
 8004b88:	d00b      	beq.n	8004ba2 <_svfiprintf_r+0x7e>
 8004b8a:	465b      	mov	r3, fp
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	4629      	mov	r1, r5
 8004b90:	4638      	mov	r0, r7
 8004b92:	f7ff ff6b 	bl	8004a6c <__ssputs_r>
 8004b96:	3001      	adds	r0, #1
 8004b98:	f000 80a7 	beq.w	8004cea <_svfiprintf_r+0x1c6>
 8004b9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b9e:	445a      	add	r2, fp
 8004ba0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 809f 	beq.w	8004cea <_svfiprintf_r+0x1c6>
 8004bac:	2300      	movs	r3, #0
 8004bae:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bb6:	f10a 0a01 	add.w	sl, sl, #1
 8004bba:	9304      	str	r3, [sp, #16]
 8004bbc:	9307      	str	r3, [sp, #28]
 8004bbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bc4:	4654      	mov	r4, sl
 8004bc6:	2205      	movs	r2, #5
 8004bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bcc:	484e      	ldr	r0, [pc, #312]	@ (8004d08 <_svfiprintf_r+0x1e4>)
 8004bce:	f7fb fb17 	bl	8000200 <memchr>
 8004bd2:	9a04      	ldr	r2, [sp, #16]
 8004bd4:	b9d8      	cbnz	r0, 8004c0e <_svfiprintf_r+0xea>
 8004bd6:	06d0      	lsls	r0, r2, #27
 8004bd8:	bf44      	itt	mi
 8004bda:	2320      	movmi	r3, #32
 8004bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004be0:	0711      	lsls	r1, r2, #28
 8004be2:	bf44      	itt	mi
 8004be4:	232b      	movmi	r3, #43	@ 0x2b
 8004be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bea:	f89a 3000 	ldrb.w	r3, [sl]
 8004bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bf0:	d015      	beq.n	8004c1e <_svfiprintf_r+0xfa>
 8004bf2:	9a07      	ldr	r2, [sp, #28]
 8004bf4:	4654      	mov	r4, sl
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	f04f 0c0a 	mov.w	ip, #10
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c02:	3b30      	subs	r3, #48	@ 0x30
 8004c04:	2b09      	cmp	r3, #9
 8004c06:	d94b      	bls.n	8004ca0 <_svfiprintf_r+0x17c>
 8004c08:	b1b0      	cbz	r0, 8004c38 <_svfiprintf_r+0x114>
 8004c0a:	9207      	str	r2, [sp, #28]
 8004c0c:	e014      	b.n	8004c38 <_svfiprintf_r+0x114>
 8004c0e:	eba0 0308 	sub.w	r3, r0, r8
 8004c12:	fa09 f303 	lsl.w	r3, r9, r3
 8004c16:	4313      	orrs	r3, r2
 8004c18:	9304      	str	r3, [sp, #16]
 8004c1a:	46a2      	mov	sl, r4
 8004c1c:	e7d2      	b.n	8004bc4 <_svfiprintf_r+0xa0>
 8004c1e:	9b03      	ldr	r3, [sp, #12]
 8004c20:	1d19      	adds	r1, r3, #4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	9103      	str	r1, [sp, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bfbb      	ittet	lt
 8004c2a:	425b      	neglt	r3, r3
 8004c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c30:	9307      	strge	r3, [sp, #28]
 8004c32:	9307      	strlt	r3, [sp, #28]
 8004c34:	bfb8      	it	lt
 8004c36:	9204      	strlt	r2, [sp, #16]
 8004c38:	7823      	ldrb	r3, [r4, #0]
 8004c3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c3c:	d10a      	bne.n	8004c54 <_svfiprintf_r+0x130>
 8004c3e:	7863      	ldrb	r3, [r4, #1]
 8004c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c42:	d132      	bne.n	8004caa <_svfiprintf_r+0x186>
 8004c44:	9b03      	ldr	r3, [sp, #12]
 8004c46:	1d1a      	adds	r2, r3, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	9203      	str	r2, [sp, #12]
 8004c4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c50:	3402      	adds	r4, #2
 8004c52:	9305      	str	r3, [sp, #20]
 8004c54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d18 <_svfiprintf_r+0x1f4>
 8004c58:	7821      	ldrb	r1, [r4, #0]
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	4650      	mov	r0, sl
 8004c5e:	f7fb facf 	bl	8000200 <memchr>
 8004c62:	b138      	cbz	r0, 8004c74 <_svfiprintf_r+0x150>
 8004c64:	9b04      	ldr	r3, [sp, #16]
 8004c66:	eba0 000a 	sub.w	r0, r0, sl
 8004c6a:	2240      	movs	r2, #64	@ 0x40
 8004c6c:	4082      	lsls	r2, r0
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	3401      	adds	r4, #1
 8004c72:	9304      	str	r3, [sp, #16]
 8004c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c78:	4824      	ldr	r0, [pc, #144]	@ (8004d0c <_svfiprintf_r+0x1e8>)
 8004c7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c7e:	2206      	movs	r2, #6
 8004c80:	f7fb fabe 	bl	8000200 <memchr>
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d036      	beq.n	8004cf6 <_svfiprintf_r+0x1d2>
 8004c88:	4b21      	ldr	r3, [pc, #132]	@ (8004d10 <_svfiprintf_r+0x1ec>)
 8004c8a:	bb1b      	cbnz	r3, 8004cd4 <_svfiprintf_r+0x1b0>
 8004c8c:	9b03      	ldr	r3, [sp, #12]
 8004c8e:	3307      	adds	r3, #7
 8004c90:	f023 0307 	bic.w	r3, r3, #7
 8004c94:	3308      	adds	r3, #8
 8004c96:	9303      	str	r3, [sp, #12]
 8004c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c9a:	4433      	add	r3, r6
 8004c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c9e:	e76a      	b.n	8004b76 <_svfiprintf_r+0x52>
 8004ca0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	e7a8      	b.n	8004bfc <_svfiprintf_r+0xd8>
 8004caa:	2300      	movs	r3, #0
 8004cac:	3401      	adds	r4, #1
 8004cae:	9305      	str	r3, [sp, #20]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	f04f 0c0a 	mov.w	ip, #10
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cbc:	3a30      	subs	r2, #48	@ 0x30
 8004cbe:	2a09      	cmp	r2, #9
 8004cc0:	d903      	bls.n	8004cca <_svfiprintf_r+0x1a6>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0c6      	beq.n	8004c54 <_svfiprintf_r+0x130>
 8004cc6:	9105      	str	r1, [sp, #20]
 8004cc8:	e7c4      	b.n	8004c54 <_svfiprintf_r+0x130>
 8004cca:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cce:	4604      	mov	r4, r0
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e7f0      	b.n	8004cb6 <_svfiprintf_r+0x192>
 8004cd4:	ab03      	add	r3, sp, #12
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	462a      	mov	r2, r5
 8004cda:	4b0e      	ldr	r3, [pc, #56]	@ (8004d14 <_svfiprintf_r+0x1f0>)
 8004cdc:	a904      	add	r1, sp, #16
 8004cde:	4638      	mov	r0, r7
 8004ce0:	f3af 8000 	nop.w
 8004ce4:	1c42      	adds	r2, r0, #1
 8004ce6:	4606      	mov	r6, r0
 8004ce8:	d1d6      	bne.n	8004c98 <_svfiprintf_r+0x174>
 8004cea:	89ab      	ldrh	r3, [r5, #12]
 8004cec:	065b      	lsls	r3, r3, #25
 8004cee:	f53f af2d 	bmi.w	8004b4c <_svfiprintf_r+0x28>
 8004cf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cf4:	e72c      	b.n	8004b50 <_svfiprintf_r+0x2c>
 8004cf6:	ab03      	add	r3, sp, #12
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	462a      	mov	r2, r5
 8004cfc:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <_svfiprintf_r+0x1f0>)
 8004cfe:	a904      	add	r1, sp, #16
 8004d00:	4638      	mov	r0, r7
 8004d02:	f000 f879 	bl	8004df8 <_printf_i>
 8004d06:	e7ed      	b.n	8004ce4 <_svfiprintf_r+0x1c0>
 8004d08:	080052d1 	.word	0x080052d1
 8004d0c:	080052db 	.word	0x080052db
 8004d10:	00000000 	.word	0x00000000
 8004d14:	08004a6d 	.word	0x08004a6d
 8004d18:	080052d7 	.word	0x080052d7

08004d1c <_printf_common>:
 8004d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d20:	4616      	mov	r6, r2
 8004d22:	4698      	mov	r8, r3
 8004d24:	688a      	ldr	r2, [r1, #8]
 8004d26:	690b      	ldr	r3, [r1, #16]
 8004d28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	bfb8      	it	lt
 8004d30:	4613      	movlt	r3, r2
 8004d32:	6033      	str	r3, [r6, #0]
 8004d34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d38:	4607      	mov	r7, r0
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	b10a      	cbz	r2, 8004d42 <_printf_common+0x26>
 8004d3e:	3301      	adds	r3, #1
 8004d40:	6033      	str	r3, [r6, #0]
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	0699      	lsls	r1, r3, #26
 8004d46:	bf42      	ittt	mi
 8004d48:	6833      	ldrmi	r3, [r6, #0]
 8004d4a:	3302      	addmi	r3, #2
 8004d4c:	6033      	strmi	r3, [r6, #0]
 8004d4e:	6825      	ldr	r5, [r4, #0]
 8004d50:	f015 0506 	ands.w	r5, r5, #6
 8004d54:	d106      	bne.n	8004d64 <_printf_common+0x48>
 8004d56:	f104 0a19 	add.w	sl, r4, #25
 8004d5a:	68e3      	ldr	r3, [r4, #12]
 8004d5c:	6832      	ldr	r2, [r6, #0]
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	42ab      	cmp	r3, r5
 8004d62:	dc26      	bgt.n	8004db2 <_printf_common+0x96>
 8004d64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d68:	6822      	ldr	r2, [r4, #0]
 8004d6a:	3b00      	subs	r3, #0
 8004d6c:	bf18      	it	ne
 8004d6e:	2301      	movne	r3, #1
 8004d70:	0692      	lsls	r2, r2, #26
 8004d72:	d42b      	bmi.n	8004dcc <_printf_common+0xb0>
 8004d74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d78:	4641      	mov	r1, r8
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	47c8      	blx	r9
 8004d7e:	3001      	adds	r0, #1
 8004d80:	d01e      	beq.n	8004dc0 <_printf_common+0xa4>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	6922      	ldr	r2, [r4, #16]
 8004d86:	f003 0306 	and.w	r3, r3, #6
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	bf02      	ittt	eq
 8004d8e:	68e5      	ldreq	r5, [r4, #12]
 8004d90:	6833      	ldreq	r3, [r6, #0]
 8004d92:	1aed      	subeq	r5, r5, r3
 8004d94:	68a3      	ldr	r3, [r4, #8]
 8004d96:	bf0c      	ite	eq
 8004d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d9c:	2500      	movne	r5, #0
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	bfc4      	itt	gt
 8004da2:	1a9b      	subgt	r3, r3, r2
 8004da4:	18ed      	addgt	r5, r5, r3
 8004da6:	2600      	movs	r6, #0
 8004da8:	341a      	adds	r4, #26
 8004daa:	42b5      	cmp	r5, r6
 8004dac:	d11a      	bne.n	8004de4 <_printf_common+0xc8>
 8004dae:	2000      	movs	r0, #0
 8004db0:	e008      	b.n	8004dc4 <_printf_common+0xa8>
 8004db2:	2301      	movs	r3, #1
 8004db4:	4652      	mov	r2, sl
 8004db6:	4641      	mov	r1, r8
 8004db8:	4638      	mov	r0, r7
 8004dba:	47c8      	blx	r9
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d103      	bne.n	8004dc8 <_printf_common+0xac>
 8004dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc8:	3501      	adds	r5, #1
 8004dca:	e7c6      	b.n	8004d5a <_printf_common+0x3e>
 8004dcc:	18e1      	adds	r1, r4, r3
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	2030      	movs	r0, #48	@ 0x30
 8004dd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dd6:	4422      	add	r2, r4
 8004dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ddc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004de0:	3302      	adds	r3, #2
 8004de2:	e7c7      	b.n	8004d74 <_printf_common+0x58>
 8004de4:	2301      	movs	r3, #1
 8004de6:	4622      	mov	r2, r4
 8004de8:	4641      	mov	r1, r8
 8004dea:	4638      	mov	r0, r7
 8004dec:	47c8      	blx	r9
 8004dee:	3001      	adds	r0, #1
 8004df0:	d0e6      	beq.n	8004dc0 <_printf_common+0xa4>
 8004df2:	3601      	adds	r6, #1
 8004df4:	e7d9      	b.n	8004daa <_printf_common+0x8e>
	...

08004df8 <_printf_i>:
 8004df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dfc:	7e0f      	ldrb	r7, [r1, #24]
 8004dfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e00:	2f78      	cmp	r7, #120	@ 0x78
 8004e02:	4691      	mov	r9, r2
 8004e04:	4680      	mov	r8, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	469a      	mov	sl, r3
 8004e0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e0e:	d807      	bhi.n	8004e20 <_printf_i+0x28>
 8004e10:	2f62      	cmp	r7, #98	@ 0x62
 8004e12:	d80a      	bhi.n	8004e2a <_printf_i+0x32>
 8004e14:	2f00      	cmp	r7, #0
 8004e16:	f000 80d2 	beq.w	8004fbe <_printf_i+0x1c6>
 8004e1a:	2f58      	cmp	r7, #88	@ 0x58
 8004e1c:	f000 80b9 	beq.w	8004f92 <_printf_i+0x19a>
 8004e20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e28:	e03a      	b.n	8004ea0 <_printf_i+0xa8>
 8004e2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e2e:	2b15      	cmp	r3, #21
 8004e30:	d8f6      	bhi.n	8004e20 <_printf_i+0x28>
 8004e32:	a101      	add	r1, pc, #4	@ (adr r1, 8004e38 <_printf_i+0x40>)
 8004e34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e38:	08004e91 	.word	0x08004e91
 8004e3c:	08004ea5 	.word	0x08004ea5
 8004e40:	08004e21 	.word	0x08004e21
 8004e44:	08004e21 	.word	0x08004e21
 8004e48:	08004e21 	.word	0x08004e21
 8004e4c:	08004e21 	.word	0x08004e21
 8004e50:	08004ea5 	.word	0x08004ea5
 8004e54:	08004e21 	.word	0x08004e21
 8004e58:	08004e21 	.word	0x08004e21
 8004e5c:	08004e21 	.word	0x08004e21
 8004e60:	08004e21 	.word	0x08004e21
 8004e64:	08004fa5 	.word	0x08004fa5
 8004e68:	08004ecf 	.word	0x08004ecf
 8004e6c:	08004f5f 	.word	0x08004f5f
 8004e70:	08004e21 	.word	0x08004e21
 8004e74:	08004e21 	.word	0x08004e21
 8004e78:	08004fc7 	.word	0x08004fc7
 8004e7c:	08004e21 	.word	0x08004e21
 8004e80:	08004ecf 	.word	0x08004ecf
 8004e84:	08004e21 	.word	0x08004e21
 8004e88:	08004e21 	.word	0x08004e21
 8004e8c:	08004f67 	.word	0x08004f67
 8004e90:	6833      	ldr	r3, [r6, #0]
 8004e92:	1d1a      	adds	r2, r3, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6032      	str	r2, [r6, #0]
 8004e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e09d      	b.n	8004fe0 <_printf_i+0x1e8>
 8004ea4:	6833      	ldr	r3, [r6, #0]
 8004ea6:	6820      	ldr	r0, [r4, #0]
 8004ea8:	1d19      	adds	r1, r3, #4
 8004eaa:	6031      	str	r1, [r6, #0]
 8004eac:	0606      	lsls	r6, r0, #24
 8004eae:	d501      	bpl.n	8004eb4 <_printf_i+0xbc>
 8004eb0:	681d      	ldr	r5, [r3, #0]
 8004eb2:	e003      	b.n	8004ebc <_printf_i+0xc4>
 8004eb4:	0645      	lsls	r5, r0, #25
 8004eb6:	d5fb      	bpl.n	8004eb0 <_printf_i+0xb8>
 8004eb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ebc:	2d00      	cmp	r5, #0
 8004ebe:	da03      	bge.n	8004ec8 <_printf_i+0xd0>
 8004ec0:	232d      	movs	r3, #45	@ 0x2d
 8004ec2:	426d      	negs	r5, r5
 8004ec4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ec8:	4859      	ldr	r0, [pc, #356]	@ (8005030 <_printf_i+0x238>)
 8004eca:	230a      	movs	r3, #10
 8004ecc:	e011      	b.n	8004ef2 <_printf_i+0xfa>
 8004ece:	6821      	ldr	r1, [r4, #0]
 8004ed0:	6833      	ldr	r3, [r6, #0]
 8004ed2:	0608      	lsls	r0, r1, #24
 8004ed4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ed8:	d402      	bmi.n	8004ee0 <_printf_i+0xe8>
 8004eda:	0649      	lsls	r1, r1, #25
 8004edc:	bf48      	it	mi
 8004ede:	b2ad      	uxthmi	r5, r5
 8004ee0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ee2:	4853      	ldr	r0, [pc, #332]	@ (8005030 <_printf_i+0x238>)
 8004ee4:	6033      	str	r3, [r6, #0]
 8004ee6:	bf14      	ite	ne
 8004ee8:	230a      	movne	r3, #10
 8004eea:	2308      	moveq	r3, #8
 8004eec:	2100      	movs	r1, #0
 8004eee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ef2:	6866      	ldr	r6, [r4, #4]
 8004ef4:	60a6      	str	r6, [r4, #8]
 8004ef6:	2e00      	cmp	r6, #0
 8004ef8:	bfa2      	ittt	ge
 8004efa:	6821      	ldrge	r1, [r4, #0]
 8004efc:	f021 0104 	bicge.w	r1, r1, #4
 8004f00:	6021      	strge	r1, [r4, #0]
 8004f02:	b90d      	cbnz	r5, 8004f08 <_printf_i+0x110>
 8004f04:	2e00      	cmp	r6, #0
 8004f06:	d04b      	beq.n	8004fa0 <_printf_i+0x1a8>
 8004f08:	4616      	mov	r6, r2
 8004f0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f0e:	fb03 5711 	mls	r7, r3, r1, r5
 8004f12:	5dc7      	ldrb	r7, [r0, r7]
 8004f14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f18:	462f      	mov	r7, r5
 8004f1a:	42bb      	cmp	r3, r7
 8004f1c:	460d      	mov	r5, r1
 8004f1e:	d9f4      	bls.n	8004f0a <_printf_i+0x112>
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d10b      	bne.n	8004f3c <_printf_i+0x144>
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	07df      	lsls	r7, r3, #31
 8004f28:	d508      	bpl.n	8004f3c <_printf_i+0x144>
 8004f2a:	6923      	ldr	r3, [r4, #16]
 8004f2c:	6861      	ldr	r1, [r4, #4]
 8004f2e:	4299      	cmp	r1, r3
 8004f30:	bfde      	ittt	le
 8004f32:	2330      	movle	r3, #48	@ 0x30
 8004f34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f3c:	1b92      	subs	r2, r2, r6
 8004f3e:	6122      	str	r2, [r4, #16]
 8004f40:	f8cd a000 	str.w	sl, [sp]
 8004f44:	464b      	mov	r3, r9
 8004f46:	aa03      	add	r2, sp, #12
 8004f48:	4621      	mov	r1, r4
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	f7ff fee6 	bl	8004d1c <_printf_common>
 8004f50:	3001      	adds	r0, #1
 8004f52:	d14a      	bne.n	8004fea <_printf_i+0x1f2>
 8004f54:	f04f 30ff 	mov.w	r0, #4294967295
 8004f58:	b004      	add	sp, #16
 8004f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	f043 0320 	orr.w	r3, r3, #32
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	4833      	ldr	r0, [pc, #204]	@ (8005034 <_printf_i+0x23c>)
 8004f68:	2778      	movs	r7, #120	@ 0x78
 8004f6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	6831      	ldr	r1, [r6, #0]
 8004f72:	061f      	lsls	r7, r3, #24
 8004f74:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f78:	d402      	bmi.n	8004f80 <_printf_i+0x188>
 8004f7a:	065f      	lsls	r7, r3, #25
 8004f7c:	bf48      	it	mi
 8004f7e:	b2ad      	uxthmi	r5, r5
 8004f80:	6031      	str	r1, [r6, #0]
 8004f82:	07d9      	lsls	r1, r3, #31
 8004f84:	bf44      	itt	mi
 8004f86:	f043 0320 	orrmi.w	r3, r3, #32
 8004f8a:	6023      	strmi	r3, [r4, #0]
 8004f8c:	b11d      	cbz	r5, 8004f96 <_printf_i+0x19e>
 8004f8e:	2310      	movs	r3, #16
 8004f90:	e7ac      	b.n	8004eec <_printf_i+0xf4>
 8004f92:	4827      	ldr	r0, [pc, #156]	@ (8005030 <_printf_i+0x238>)
 8004f94:	e7e9      	b.n	8004f6a <_printf_i+0x172>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	f023 0320 	bic.w	r3, r3, #32
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	e7f6      	b.n	8004f8e <_printf_i+0x196>
 8004fa0:	4616      	mov	r6, r2
 8004fa2:	e7bd      	b.n	8004f20 <_printf_i+0x128>
 8004fa4:	6833      	ldr	r3, [r6, #0]
 8004fa6:	6825      	ldr	r5, [r4, #0]
 8004fa8:	6961      	ldr	r1, [r4, #20]
 8004faa:	1d18      	adds	r0, r3, #4
 8004fac:	6030      	str	r0, [r6, #0]
 8004fae:	062e      	lsls	r6, r5, #24
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	d501      	bpl.n	8004fb8 <_printf_i+0x1c0>
 8004fb4:	6019      	str	r1, [r3, #0]
 8004fb6:	e002      	b.n	8004fbe <_printf_i+0x1c6>
 8004fb8:	0668      	lsls	r0, r5, #25
 8004fba:	d5fb      	bpl.n	8004fb4 <_printf_i+0x1bc>
 8004fbc:	8019      	strh	r1, [r3, #0]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	6123      	str	r3, [r4, #16]
 8004fc2:	4616      	mov	r6, r2
 8004fc4:	e7bc      	b.n	8004f40 <_printf_i+0x148>
 8004fc6:	6833      	ldr	r3, [r6, #0]
 8004fc8:	1d1a      	adds	r2, r3, #4
 8004fca:	6032      	str	r2, [r6, #0]
 8004fcc:	681e      	ldr	r6, [r3, #0]
 8004fce:	6862      	ldr	r2, [r4, #4]
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	f7fb f914 	bl	8000200 <memchr>
 8004fd8:	b108      	cbz	r0, 8004fde <_printf_i+0x1e6>
 8004fda:	1b80      	subs	r0, r0, r6
 8004fdc:	6060      	str	r0, [r4, #4]
 8004fde:	6863      	ldr	r3, [r4, #4]
 8004fe0:	6123      	str	r3, [r4, #16]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fe8:	e7aa      	b.n	8004f40 <_printf_i+0x148>
 8004fea:	6923      	ldr	r3, [r4, #16]
 8004fec:	4632      	mov	r2, r6
 8004fee:	4649      	mov	r1, r9
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	47d0      	blx	sl
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d0ad      	beq.n	8004f54 <_printf_i+0x15c>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	079b      	lsls	r3, r3, #30
 8004ffc:	d413      	bmi.n	8005026 <_printf_i+0x22e>
 8004ffe:	68e0      	ldr	r0, [r4, #12]
 8005000:	9b03      	ldr	r3, [sp, #12]
 8005002:	4298      	cmp	r0, r3
 8005004:	bfb8      	it	lt
 8005006:	4618      	movlt	r0, r3
 8005008:	e7a6      	b.n	8004f58 <_printf_i+0x160>
 800500a:	2301      	movs	r3, #1
 800500c:	4632      	mov	r2, r6
 800500e:	4649      	mov	r1, r9
 8005010:	4640      	mov	r0, r8
 8005012:	47d0      	blx	sl
 8005014:	3001      	adds	r0, #1
 8005016:	d09d      	beq.n	8004f54 <_printf_i+0x15c>
 8005018:	3501      	adds	r5, #1
 800501a:	68e3      	ldr	r3, [r4, #12]
 800501c:	9903      	ldr	r1, [sp, #12]
 800501e:	1a5b      	subs	r3, r3, r1
 8005020:	42ab      	cmp	r3, r5
 8005022:	dcf2      	bgt.n	800500a <_printf_i+0x212>
 8005024:	e7eb      	b.n	8004ffe <_printf_i+0x206>
 8005026:	2500      	movs	r5, #0
 8005028:	f104 0619 	add.w	r6, r4, #25
 800502c:	e7f5      	b.n	800501a <_printf_i+0x222>
 800502e:	bf00      	nop
 8005030:	080052e2 	.word	0x080052e2
 8005034:	080052f3 	.word	0x080052f3

08005038 <memmove>:
 8005038:	4288      	cmp	r0, r1
 800503a:	b510      	push	{r4, lr}
 800503c:	eb01 0402 	add.w	r4, r1, r2
 8005040:	d902      	bls.n	8005048 <memmove+0x10>
 8005042:	4284      	cmp	r4, r0
 8005044:	4623      	mov	r3, r4
 8005046:	d807      	bhi.n	8005058 <memmove+0x20>
 8005048:	1e43      	subs	r3, r0, #1
 800504a:	42a1      	cmp	r1, r4
 800504c:	d008      	beq.n	8005060 <memmove+0x28>
 800504e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005052:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005056:	e7f8      	b.n	800504a <memmove+0x12>
 8005058:	4402      	add	r2, r0
 800505a:	4601      	mov	r1, r0
 800505c:	428a      	cmp	r2, r1
 800505e:	d100      	bne.n	8005062 <memmove+0x2a>
 8005060:	bd10      	pop	{r4, pc}
 8005062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800506a:	e7f7      	b.n	800505c <memmove+0x24>

0800506c <_sbrk_r>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	4d06      	ldr	r5, [pc, #24]	@ (8005088 <_sbrk_r+0x1c>)
 8005070:	2300      	movs	r3, #0
 8005072:	4604      	mov	r4, r0
 8005074:	4608      	mov	r0, r1
 8005076:	602b      	str	r3, [r5, #0]
 8005078:	f7fb fd76 	bl	8000b68 <_sbrk>
 800507c:	1c43      	adds	r3, r0, #1
 800507e:	d102      	bne.n	8005086 <_sbrk_r+0x1a>
 8005080:	682b      	ldr	r3, [r5, #0]
 8005082:	b103      	cbz	r3, 8005086 <_sbrk_r+0x1a>
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	bd38      	pop	{r3, r4, r5, pc}
 8005088:	200006f4 	.word	0x200006f4

0800508c <memcpy>:
 800508c:	440a      	add	r2, r1
 800508e:	4291      	cmp	r1, r2
 8005090:	f100 33ff 	add.w	r3, r0, #4294967295
 8005094:	d100      	bne.n	8005098 <memcpy+0xc>
 8005096:	4770      	bx	lr
 8005098:	b510      	push	{r4, lr}
 800509a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800509e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050a2:	4291      	cmp	r1, r2
 80050a4:	d1f9      	bne.n	800509a <memcpy+0xe>
 80050a6:	bd10      	pop	{r4, pc}

080050a8 <_realloc_r>:
 80050a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ac:	4680      	mov	r8, r0
 80050ae:	4615      	mov	r5, r2
 80050b0:	460c      	mov	r4, r1
 80050b2:	b921      	cbnz	r1, 80050be <_realloc_r+0x16>
 80050b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050b8:	4611      	mov	r1, r2
 80050ba:	f7ff bc4b 	b.w	8004954 <_malloc_r>
 80050be:	b92a      	cbnz	r2, 80050cc <_realloc_r+0x24>
 80050c0:	f7ff fbdc 	bl	800487c <_free_r>
 80050c4:	2400      	movs	r4, #0
 80050c6:	4620      	mov	r0, r4
 80050c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050cc:	f000 f81a 	bl	8005104 <_malloc_usable_size_r>
 80050d0:	4285      	cmp	r5, r0
 80050d2:	4606      	mov	r6, r0
 80050d4:	d802      	bhi.n	80050dc <_realloc_r+0x34>
 80050d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80050da:	d8f4      	bhi.n	80050c6 <_realloc_r+0x1e>
 80050dc:	4629      	mov	r1, r5
 80050de:	4640      	mov	r0, r8
 80050e0:	f7ff fc38 	bl	8004954 <_malloc_r>
 80050e4:	4607      	mov	r7, r0
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d0ec      	beq.n	80050c4 <_realloc_r+0x1c>
 80050ea:	42b5      	cmp	r5, r6
 80050ec:	462a      	mov	r2, r5
 80050ee:	4621      	mov	r1, r4
 80050f0:	bf28      	it	cs
 80050f2:	4632      	movcs	r2, r6
 80050f4:	f7ff ffca 	bl	800508c <memcpy>
 80050f8:	4621      	mov	r1, r4
 80050fa:	4640      	mov	r0, r8
 80050fc:	f7ff fbbe 	bl	800487c <_free_r>
 8005100:	463c      	mov	r4, r7
 8005102:	e7e0      	b.n	80050c6 <_realloc_r+0x1e>

08005104 <_malloc_usable_size_r>:
 8005104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005108:	1f18      	subs	r0, r3, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	bfbc      	itt	lt
 800510e:	580b      	ldrlt	r3, [r1, r0]
 8005110:	18c0      	addlt	r0, r0, r3
 8005112:	4770      	bx	lr

08005114 <_init>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr

08005120 <_fini>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	bf00      	nop
 8005124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005126:	bc08      	pop	{r3}
 8005128:	469e      	mov	lr, r3
 800512a:	4770      	bx	lr
