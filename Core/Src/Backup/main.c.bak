/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdlib.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum
{
	Waiting,
	Command,
	Argument,
	number,
	End
} FrameDetection;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
ring_buffer rxRingBuffer;
ring_buffer txRingBuffer;
uint8_t USART_TxBuf[TX_BUFFER_SIZE];
uint8_t USART_RxBuf[RX_BUFFER_SIZE];


uint8_t znak;
uint16_t komunikat, dlugosc;
volatile int ld2STATE = 0;
volatile uint16_t slow = 0;

uint8_t tempINDX = 0;
char NumArr[128]; // LED[BLINK,2] --> "2"
char cmd[128]; // komendy przesłane przez usera (np LED, INSERT)
char CMDarg[128]; // argument komenty np "ON" --> LED[ON]
float nr = 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
extern int16_t USART_getchar();
extern void USART_fsend();
extern void USART_send();

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ring_buffer_setup(ring_buffer* rb, uint8_t* buffer, uint32_t size)
{
	rb->buffer = buffer;
	rb->readIndex = 0;
	rb->writeIndex = 0;
	rb->mask = size - 1; // zakładając, że zmienna size jest potęgą 2
}
void FrameRd() {
    static FrameDetection detection = Waiting;

    int16_t sign = USART_getchar(); // Receive next character
    if (sign < 0) return; // No character received

    switch (detection) {
        case Waiting:
            if (sign == 'L' || sign == 'I') {
                detection = Command;
                tempINDX = 0;
            }
            break;

        case Command:
            if (sign == '[') {
                detection = Argument;
                cmd[tempINDX] = '\0'; // End the command string
                tempINDX = 0;
            } else {
                cmd[tempINDX++] = sign; // Accumulate command
            }
            break;

        case Argument:
            if (sign == ']') {
                CMDarg[tempINDX] = '\0'; // End argument string
                detection = End;
            } else if (sign == ',') {
                CMDarg[tempINDX] = '\0'; // End argument string
                detection = number;
                tempINDX = 0;
            } else {
                CMDarg[tempINDX++] = sign; // Accumulate argument
            }
            break;

        case number:
            if (sign == ']') {
                NumArr[tempINDX] = '\0'; // End number string
                nr = atoi(NumArr);
                detection = End;
            } else {
                NumArr[tempINDX++] = sign; // Accumulate number
            }
            break;

        case End:
            if (strcmp(cmd, "LED") == 0) {
                if (strcmp(CMDarg, "ON") == 0) {
                    ld2STATE = 1;
                } else if (strcmp(CMDarg, "OFF") == 0) {
                    ld2STATE = 2;
                } else if (strcmp(CMDarg, "BLINK") == 0) {
                    slow = 1000 / nr;
                    ld2STATE = 3;
                } else {
                    USART_fsend("blad: komenda nie rozpoznana\r\n");
                }
            } else if (strcmp(cmd, "INSERT") == 0) {
                if (strcmp(CMDarg, "Delay") == 0) {
                    slow = nr;
                    ld2STATE = 4;
                } else {
                    USART_fsend("blad: komenda nie rozpoznana\r\n");
                }
            } else {
                USART_fsend("blad: komenda nie rozpoznana\r\n");
            }

            // Reset state for next command
            tempINDX = 0;
            nr = 0;
            memset(cmd, '\0', sizeof(cmd));
            memset(CMDarg, '\0', sizeof(CMDarg));
            memset(NumArr, '\0', sizeof(NumArr));
            detection = Waiting;
            break;
    }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  ring_buffer_setup(&rxRingBuffer, USART_RxBuf, RX_BUFFER_SIZE);
  ring_buffer_setup(&txRingBuffer, USART_TxBuf, TX_BUFFER_SIZE);

  HAL_UART_Receive_IT(&huart2, &USART_RxBuf[0], 1);

  USART_fsend("START %03d\r\n",72);
  USART_fsend("START1 0x%04X\r\n",72);
  USART_fsend("START2 %03d\r\n",72);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (1) {
	      switch (ld2STATE) {
	          case 1: // LED ON
	              HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	              break;

	          case 2: // LED OFF
	              HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	              break;

	          case 3: // LED BLINK
	              HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	              HAL_Delay(slow); // Blink at specified rate
	              break;

	          case 4: // Delay with LED OFF
	              HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	              HAL_Delay(slow); // Insert delay
	              ld2STATE = 0; // Reset after delay
	              break;

	          default:
	              break;
	      }
	  }

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

// Callback do odbioru bajtów - dodaje każdy odebrany bajt do `rxRingBuffer`


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
   if(huart==&huart2){
	   if(txRingBuffer.writeIndex!=txRingBuffer.readIndex){
		   uint8_t tmp = USART_TxBuf[txRingBuffer.readIndex];
		   txRingBuffer.readIndex++;
		   if(txRingBuffer.readIndex >= TX_BUFFER_SIZE) txRingBuffer.readIndex=0;
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
	   }
   }
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	 if(huart==&huart2){
		 rxRingBuffer.writeIndex++;
		 if(rxRingBuffer.writeIndex >= RX_BUFFER_SIZE) rxRingBuffer.writeIndex=0;
		 HAL_UART_Transmit_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex - 1],1);
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[rxRingBuffer.writeIndex],1);
		 FrameRd();
	 }
}





/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
